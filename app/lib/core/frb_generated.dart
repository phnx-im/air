// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.1.

// ignore_for_file: unreachable_switch_default, prefer_const_constructors
import 'package:convert/convert.dart';

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/conversation_details_cubit.dart';
import 'api/conversation_list_cubit.dart';
import 'api/logging.dart';
import 'api/markdown.dart';
import 'api/message_cubit.dart';
import 'api/message_list_cubit.dart';
import 'api/types.dart';
import 'api/user.dart';
import 'api/user_cubit.dart';
import 'api/utils.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:uuid/uuid.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiInit();
    await api.crateApiMarkdownInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.7.1';

  @override
  int get rustContentHash => -204267514;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'phnxapplogic',
    ioDirectory: '../applogic/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void>
      crateApiConversationDetailsCubitConversationDetailsCubitBaseClose(
          {required ConversationDetailsCubitBase that});

  bool crateApiConversationDetailsCubitConversationDetailsCubitBaseIsClosed(
      {required ConversationDetailsCubitBase that});

  Future<UiUserProfile?>
      crateApiConversationDetailsCubitConversationDetailsCubitBaseLoadConversationUserProfile(
          {required ConversationDetailsCubitBase that});

  Future<void>
      crateApiConversationDetailsCubitConversationDetailsCubitBaseMarkAsRead(
          {required ConversationDetailsCubitBase that,
          required ConversationMessageId untilMessageId,
          required DateTime untilTimestamp});

  ConversationDetailsCubitBase
      crateApiConversationDetailsCubitConversationDetailsCubitBaseNew(
          {required UserCubitBase userCubit,
          required ConversationId conversationId});

  Future<void>
      crateApiConversationDetailsCubitConversationDetailsCubitBaseSendMessage(
          {required ConversationDetailsCubitBase that,
          required String messageText});

  Future<void>
      crateApiConversationDetailsCubitConversationDetailsCubitBaseSetConversationPicture(
          {required ConversationDetailsCubitBase that, Uint8List? bytes});

  ConversationDetailsState
      crateApiConversationDetailsCubitConversationDetailsCubitBaseState(
          {required ConversationDetailsCubitBase that});

  Stream<ConversationDetailsState>
      crateApiConversationDetailsCubitConversationDetailsCubitBaseStream(
          {required ConversationDetailsCubitBase that});

  Future<void> crateApiConversationListCubitConversationListCubitBaseClose(
      {required ConversationListCubitBase that});

  Future<ConversationId>
      crateApiConversationListCubitConversationListCubitBaseCreateConnection(
          {required ConversationListCubitBase that, required String userName});

  Future<ConversationId>
      crateApiConversationListCubitConversationListCubitBaseCreateConversation(
          {required ConversationListCubitBase that, required String groupName});

  bool crateApiConversationListCubitConversationListCubitBaseIsClosed(
      {required ConversationListCubitBase that});

  ConversationListCubitBase
      crateApiConversationListCubitConversationListCubitBaseNew(
          {required UserCubitBase userCubit});

  ConversationListState
      crateApiConversationListCubitConversationListCubitBaseState(
          {required ConversationListCubitBase that});

  Stream<ConversationListState>
      crateApiConversationListCubitConversationListCubitBaseStream(
          {required ConversationListCubitBase that});

  Future<void> crateApiLoggingLogWriterWriteLine(
      {required LogWriter that, required String message});

  Future<void> crateApiMessageCubitMessageCubitBaseClose(
      {required MessageCubitBase that});

  bool crateApiMessageCubitMessageCubitBaseIsClosed(
      {required MessageCubitBase that});

  MessageCubitBase crateApiMessageCubitMessageCubitBaseNew(
      {required UserCubitBase userCubit, required MessageState initialState});

  MessageState crateApiMessageCubitMessageCubitBaseState(
      {required MessageCubitBase that});

  Stream<MessageState> crateApiMessageCubitMessageCubitBaseStream(
      {required MessageCubitBase that});

  Future<void> crateApiMessageListCubitMessageListCubitBaseClose(
      {required MessageListCubitBase that});

  bool crateApiMessageListCubitMessageListCubitBaseIsClosed(
      {required MessageListCubitBase that});

  MessageListCubitBase crateApiMessageListCubitMessageListCubitBaseNew(
      {required UserCubitBase userCubit,
      required ConversationId conversationId});

  MessageListState crateApiMessageListCubitMessageListCubitBaseState(
      {required MessageListCubitBase that});

  Stream<MessageListState> crateApiMessageListCubitMessageListCubitBaseStream(
      {required MessageListCubitBase that});

  Future<MessageListState> crateApiMessageListCubitMessageListStateDefault();

  int crateApiMessageListCubitMessageListStateLoadedMessagesCount(
      {required MessageListState that});

  UiConversationMessage? crateApiMessageListCubitMessageListStateMessageAt(
      {required MessageListState that, required int index});

  int? crateApiMessageListCubitMessageListStateMessageIdIndex(
      {required MessageListState that,
      required ConversationMessageId messageId});

  String? crateApiUserCubitUiUserDisplayName({required UiUser that});

  ImageData? crateApiUserCubitUiUserProfilePicture({required UiUser that});

  String crateApiUserCubitUiUserUserName({required UiUser that});

  Future<void> crateApiUserCubitUserCubitBaseAddUserToConversation(
      {required UserCubitBase that,
      required ConversationId conversationId,
      required String userName});

  Future<void> crateApiUserCubitUserCubitBaseClose(
      {required UserCubitBase that});

  Future<List<UiContact>> crateApiUserCubitUserCubitBaseContacts(
      {required UserCubitBase that});

  bool crateApiUserCubitUserCubitBaseIsClosed({required UserCubitBase that});

  UserCubitBase crateApiUserCubitUserCubitBaseNew({required User user});

  Future<void> crateApiUserCubitUserCubitBaseRemoveUserFromConversation(
      {required UserCubitBase that,
      required ConversationId conversationId,
      required String userName});

  Future<void> crateApiUserCubitUserCubitBaseSetProfile(
      {required UserCubitBase that,
      String? displayName,
      Uint8List? profilePicture});

  UiUser crateApiUserCubitUserCubitBaseState({required UserCubitBase that});

  Stream<UiUser> crateApiUserCubitUserCubitBaseStream(
      {required UserCubitBase that});

  Future<UiUserProfile?> crateApiUserCubitUserCubitBaseUserProfile(
      {required UserCubitBase that, required String userName});

  UuidValue crateApiUserUserClientId({required User that});

  Future<int> crateApiUserUserGlobalUnreadMessagesCount({required User that});

  Future<User> crateApiUserUserLoad(
      {required String dbPath,
      required UiUserName userName,
      required UuidValue clientId});

  Future<List<UiClientRecord>> crateApiUserUserLoadClientRecords(
      {required String dbPath});

  Future<User?> crateApiUserUserLoadDefault({required String path});

  Future<User> crateApiUserUserNew(
      {required String userName,
      required String password,
      required String address,
      required String path,
      PlatformPushToken? pushToken,
      String? displayName,
      Uint8List? profilePicture});

  Future<void> crateApiUserUserUpdatePushToken(
      {required User that, PlatformPushToken? pushToken});

  String crateApiUserUserUserName({required User that});

  Future<void> crateApiLoggingClearAppLogs();

  Future<void> crateApiLoggingClearBackgroundLogs({required String cacheDir});

  Future<ConversationDetailsState>
      crateApiConversationDetailsCubitConversationDetailsStateDefault();

  Future<ConversationListState>
      crateApiConversationListCubitConversationListStateDefault();

  Stream<LogEntry> crateApiLoggingCreateLogStream();

  Future<void> crateApiUtilsDeleteClientDatabase(
      {required String dbPath,
      required String userName,
      required UuidValue clientId});

  Future<void> crateApiUtilsDeleteDatabases({required String dbPath});

  String crateApiTypesImageDataComputeHash({required List<int> bytes});

  Future<void> crateApiInit();

  Future<void> crateApiMarkdownInitApp();

  LogWriter crateApiLoggingInitRustLogging({required String logFile});

  Future<MessageContent> crateApiMarkdownMessageContentError(
      {required String message});

  Future<MessageContent> crateApiMarkdownMessageContentTryParseMarkdown(
      {required String string});

  MessageContent crateApiMarkdownMessageContentTryParseMarkdownRaw(
      {required List<int> string});

  Future<String> crateApiLoggingReadAppLogs();

  Future<String> crateApiLoggingReadBackgroundLogs({required String cacheDir});

  Future<Uint8List> crateApiLoggingTarLogs({required String cacheDir});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ConversationDetailsCubitBase;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ConversationDetailsCubitBase;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ConversationDetailsCubitBasePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ConversationListCubitBase;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ConversationListCubitBase;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ConversationListCubitBasePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LogWriter;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LogWriter;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_LogWriterPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MessageCubitBase;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MessageCubitBase;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MessageCubitBasePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MessageListCubitBase;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MessageListCubitBase;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MessageListCubitBasePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MessageListState;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MessageListState;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MessageListStatePtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_UiUser;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_UiUser;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_UiUserPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_User;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_User;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_UserPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UserCubitBase;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UserCubitBase;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_UserCubitBasePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void>
      crateApiConversationDetailsCubitConversationDetailsCubitBaseClose(
          {required ConversationDetailsCubitBase that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationDetailsCubitBase(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiConversationDetailsCubitConversationDetailsCubitBaseCloseConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiConversationDetailsCubitConversationDetailsCubitBaseCloseConstMeta =>
          const TaskConstMeta(
            debugName: "ConversationDetailsCubitBase_close",
            argNames: ["that"],
          );

  @override
  bool crateApiConversationDetailsCubitConversationDetailsCubitBaseIsClosed(
      {required ConversationDetailsCubitBase that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationDetailsCubitBase(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiConversationDetailsCubitConversationDetailsCubitBaseIsClosedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiConversationDetailsCubitConversationDetailsCubitBaseIsClosedConstMeta =>
          const TaskConstMeta(
            debugName: "ConversationDetailsCubitBase_is_closed",
            argNames: ["that"],
          );

  @override
  Future<UiUserProfile?>
      crateApiConversationDetailsCubitConversationDetailsCubitBaseLoadConversationUserProfile(
          {required ConversationDetailsCubitBase that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationDetailsCubitBase(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_ui_user_profile,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiConversationDetailsCubitConversationDetailsCubitBaseLoadConversationUserProfileConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiConversationDetailsCubitConversationDetailsCubitBaseLoadConversationUserProfileConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConversationDetailsCubitBase_load_conversation_user_profile",
            argNames: ["that"],
          );

  @override
  Future<void>
      crateApiConversationDetailsCubitConversationDetailsCubitBaseMarkAsRead(
          {required ConversationDetailsCubitBase that,
          required ConversationMessageId untilMessageId,
          required DateTime untilTimestamp}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationDetailsCubitBase(
            that, serializer);
        sse_encode_box_autoadd_conversation_message_id(
            untilMessageId, serializer);
        sse_encode_Chrono_Utc(untilTimestamp, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiConversationDetailsCubitConversationDetailsCubitBaseMarkAsReadConstMeta,
      argValues: [that, untilMessageId, untilTimestamp],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiConversationDetailsCubitConversationDetailsCubitBaseMarkAsReadConstMeta =>
          const TaskConstMeta(
            debugName: "ConversationDetailsCubitBase_mark_as_read",
            argNames: ["that", "untilMessageId", "untilTimestamp"],
          );

  @override
  ConversationDetailsCubitBase
      crateApiConversationDetailsCubitConversationDetailsCubitBaseNew(
          {required UserCubitBase userCubit,
          required ConversationId conversationId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserCubitBase(
            userCubit, serializer);
        sse_encode_box_autoadd_conversation_id(conversationId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationDetailsCubitBase,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiConversationDetailsCubitConversationDetailsCubitBaseNewConstMeta,
      argValues: [userCubit, conversationId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiConversationDetailsCubitConversationDetailsCubitBaseNewConstMeta =>
          const TaskConstMeta(
            debugName: "ConversationDetailsCubitBase_new",
            argNames: ["userCubit", "conversationId"],
          );

  @override
  Future<void>
      crateApiConversationDetailsCubitConversationDetailsCubitBaseSendMessage(
          {required ConversationDetailsCubitBase that,
          required String messageText}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationDetailsCubitBase(
            that, serializer);
        sse_encode_String(messageText, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiConversationDetailsCubitConversationDetailsCubitBaseSendMessageConstMeta,
      argValues: [that, messageText],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiConversationDetailsCubitConversationDetailsCubitBaseSendMessageConstMeta =>
          const TaskConstMeta(
            debugName: "ConversationDetailsCubitBase_send_message",
            argNames: ["that", "messageText"],
          );

  @override
  Future<void>
      crateApiConversationDetailsCubitConversationDetailsCubitBaseSetConversationPicture(
          {required ConversationDetailsCubitBase that, Uint8List? bytes}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationDetailsCubitBase(
            that, serializer);
        sse_encode_opt_list_prim_u_8_strict(bytes, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiConversationDetailsCubitConversationDetailsCubitBaseSetConversationPictureConstMeta,
      argValues: [that, bytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiConversationDetailsCubitConversationDetailsCubitBaseSetConversationPictureConstMeta =>
          const TaskConstMeta(
            debugName: "ConversationDetailsCubitBase_set_conversation_picture",
            argNames: ["that", "bytes"],
          );

  @override
  ConversationDetailsState
      crateApiConversationDetailsCubitConversationDetailsCubitBaseState(
          {required ConversationDetailsCubitBase that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationDetailsCubitBase(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_conversation_details_state,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiConversationDetailsCubitConversationDetailsCubitBaseStateConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiConversationDetailsCubitConversationDetailsCubitBaseStateConstMeta =>
          const TaskConstMeta(
            debugName: "ConversationDetailsCubitBase_state",
            argNames: ["that"],
          );

  @override
  Stream<ConversationDetailsState>
      crateApiConversationDetailsCubitConversationDetailsCubitBaseStream(
          {required ConversationDetailsCubitBase that}) {
    final sink = RustStreamSink<ConversationDetailsState>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationDetailsCubitBase(
            that, serializer);
        sse_encode_StreamSink_conversation_details_state_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiConversationDetailsCubitConversationDetailsCubitBaseStreamConstMeta,
      argValues: [that, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiConversationDetailsCubitConversationDetailsCubitBaseStreamConstMeta =>
          const TaskConstMeta(
            debugName: "ConversationDetailsCubitBase_stream",
            argNames: ["that", "sink"],
          );

  @override
  Future<void> crateApiConversationListCubitConversationListCubitBaseClose(
      {required ConversationListCubitBase that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationListCubitBase(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiConversationListCubitConversationListCubitBaseCloseConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiConversationListCubitConversationListCubitBaseCloseConstMeta =>
          const TaskConstMeta(
            debugName: "ConversationListCubitBase_close",
            argNames: ["that"],
          );

  @override
  Future<ConversationId>
      crateApiConversationListCubitConversationListCubitBaseCreateConnection(
          {required ConversationListCubitBase that, required String userName}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationListCubitBase(
            that, serializer);
        sse_encode_String(userName, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_conversation_id,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiConversationListCubitConversationListCubitBaseCreateConnectionConstMeta,
      argValues: [that, userName],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiConversationListCubitConversationListCubitBaseCreateConnectionConstMeta =>
          const TaskConstMeta(
            debugName: "ConversationListCubitBase_create_connection",
            argNames: ["that", "userName"],
          );

  @override
  Future<ConversationId>
      crateApiConversationListCubitConversationListCubitBaseCreateConversation(
          {required ConversationListCubitBase that,
          required String groupName}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationListCubitBase(
            that, serializer);
        sse_encode_String(groupName, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_conversation_id,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiConversationListCubitConversationListCubitBaseCreateConversationConstMeta,
      argValues: [that, groupName],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiConversationListCubitConversationListCubitBaseCreateConversationConstMeta =>
          const TaskConstMeta(
            debugName: "ConversationListCubitBase_create_conversation",
            argNames: ["that", "groupName"],
          );

  @override
  bool crateApiConversationListCubitConversationListCubitBaseIsClosed(
      {required ConversationListCubitBase that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationListCubitBase(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiConversationListCubitConversationListCubitBaseIsClosedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiConversationListCubitConversationListCubitBaseIsClosedConstMeta =>
          const TaskConstMeta(
            debugName: "ConversationListCubitBase_is_closed",
            argNames: ["that"],
          );

  @override
  ConversationListCubitBase
      crateApiConversationListCubitConversationListCubitBaseNew(
          {required UserCubitBase userCubit}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserCubitBase(
            userCubit, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationListCubitBase,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiConversationListCubitConversationListCubitBaseNewConstMeta,
      argValues: [userCubit],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiConversationListCubitConversationListCubitBaseNewConstMeta =>
          const TaskConstMeta(
            debugName: "ConversationListCubitBase_new",
            argNames: ["userCubit"],
          );

  @override
  ConversationListState
      crateApiConversationListCubitConversationListCubitBaseState(
          {required ConversationListCubitBase that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationListCubitBase(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_conversation_list_state,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiConversationListCubitConversationListCubitBaseStateConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiConversationListCubitConversationListCubitBaseStateConstMeta =>
          const TaskConstMeta(
            debugName: "ConversationListCubitBase_state",
            argNames: ["that"],
          );

  @override
  Stream<ConversationListState>
      crateApiConversationListCubitConversationListCubitBaseStream(
          {required ConversationListCubitBase that}) {
    final sink = RustStreamSink<ConversationListState>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationListCubitBase(
            that, serializer);
        sse_encode_StreamSink_conversation_list_state_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiConversationListCubitConversationListCubitBaseStreamConstMeta,
      argValues: [that, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiConversationListCubitConversationListCubitBaseStreamConstMeta =>
          const TaskConstMeta(
            debugName: "ConversationListCubitBase_stream",
            argNames: ["that", "sink"],
          );

  @override
  Future<void> crateApiLoggingLogWriterWriteLine(
      {required LogWriter that, required String message}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLogWriter(
            that, serializer);
        sse_encode_String(message, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiLoggingLogWriterWriteLineConstMeta,
      argValues: [that, message],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLoggingLogWriterWriteLineConstMeta =>
      const TaskConstMeta(
        debugName: "LogWriter_write_line",
        argNames: ["that", "message"],
      );

  @override
  Future<void> crateApiMessageCubitMessageCubitBaseClose(
      {required MessageCubitBase that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageCubitBase(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMessageCubitMessageCubitBaseCloseConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMessageCubitMessageCubitBaseCloseConstMeta =>
      const TaskConstMeta(
        debugName: "MessageCubitBase_close",
        argNames: ["that"],
      );

  @override
  bool crateApiMessageCubitMessageCubitBaseIsClosed(
      {required MessageCubitBase that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageCubitBase(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMessageCubitMessageCubitBaseIsClosedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMessageCubitMessageCubitBaseIsClosedConstMeta =>
      const TaskConstMeta(
        debugName: "MessageCubitBase_is_closed",
        argNames: ["that"],
      );

  @override
  MessageCubitBase crateApiMessageCubitMessageCubitBaseNew(
      {required UserCubitBase userCubit, required MessageState initialState}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserCubitBase(
            userCubit, serializer);
        sse_encode_box_autoadd_message_state(initialState, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageCubitBase,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMessageCubitMessageCubitBaseNewConstMeta,
      argValues: [userCubit, initialState],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMessageCubitMessageCubitBaseNewConstMeta =>
      const TaskConstMeta(
        debugName: "MessageCubitBase_new",
        argNames: ["userCubit", "initialState"],
      );

  @override
  MessageState crateApiMessageCubitMessageCubitBaseState(
      {required MessageCubitBase that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageCubitBase(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_message_state,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMessageCubitMessageCubitBaseStateConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMessageCubitMessageCubitBaseStateConstMeta =>
      const TaskConstMeta(
        debugName: "MessageCubitBase_state",
        argNames: ["that"],
      );

  @override
  Stream<MessageState> crateApiMessageCubitMessageCubitBaseStream(
      {required MessageCubitBase that}) {
    final sink = RustStreamSink<MessageState>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageCubitBase(
            that, serializer);
        sse_encode_StreamSink_message_state_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMessageCubitMessageCubitBaseStreamConstMeta,
      argValues: [that, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiMessageCubitMessageCubitBaseStreamConstMeta =>
      const TaskConstMeta(
        debugName: "MessageCubitBase_stream",
        argNames: ["that", "sink"],
      );

  @override
  Future<void> crateApiMessageListCubitMessageListCubitBaseClose(
      {required MessageListCubitBase that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListCubitBase(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMessageListCubitMessageListCubitBaseCloseConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMessageListCubitMessageListCubitBaseCloseConstMeta =>
          const TaskConstMeta(
            debugName: "MessageListCubitBase_close",
            argNames: ["that"],
          );

  @override
  bool crateApiMessageListCubitMessageListCubitBaseIsClosed(
      {required MessageListCubitBase that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListCubitBase(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMessageListCubitMessageListCubitBaseIsClosedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMessageListCubitMessageListCubitBaseIsClosedConstMeta =>
          const TaskConstMeta(
            debugName: "MessageListCubitBase_is_closed",
            argNames: ["that"],
          );

  @override
  MessageListCubitBase crateApiMessageListCubitMessageListCubitBaseNew(
      {required UserCubitBase userCubit,
      required ConversationId conversationId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserCubitBase(
            userCubit, serializer);
        sse_encode_box_autoadd_conversation_id(conversationId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListCubitBase,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMessageListCubitMessageListCubitBaseNewConstMeta,
      argValues: [userCubit, conversationId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMessageListCubitMessageListCubitBaseNewConstMeta =>
      const TaskConstMeta(
        debugName: "MessageListCubitBase_new",
        argNames: ["userCubit", "conversationId"],
      );

  @override
  MessageListState crateApiMessageListCubitMessageListCubitBaseState(
      {required MessageListCubitBase that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListCubitBase(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListState,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMessageListCubitMessageListCubitBaseStateConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMessageListCubitMessageListCubitBaseStateConstMeta =>
          const TaskConstMeta(
            debugName: "MessageListCubitBase_state",
            argNames: ["that"],
          );

  @override
  Stream<MessageListState> crateApiMessageListCubitMessageListCubitBaseStream(
      {required MessageListCubitBase that}) {
    final sink = RustStreamSink<MessageListState>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListCubitBase(
            that, serializer);
        sse_encode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListState_Sse(
            sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMessageListCubitMessageListCubitBaseStreamConstMeta,
      argValues: [that, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiMessageListCubitMessageListCubitBaseStreamConstMeta =>
          const TaskConstMeta(
            debugName: "MessageListCubitBase_stream",
            argNames: ["that", "sink"],
          );

  @override
  Future<MessageListState> crateApiMessageListCubitMessageListStateDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListState,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMessageListCubitMessageListStateDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMessageListCubitMessageListStateDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "MessageListState_default",
        argNames: [],
      );

  @override
  int crateApiMessageListCubitMessageListStateLoadedMessagesCount(
      {required MessageListState that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListState(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_CastedPrimitive_usize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMessageListCubitMessageListStateLoadedMessagesCountConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMessageListCubitMessageListStateLoadedMessagesCountConstMeta =>
          const TaskConstMeta(
            debugName: "MessageListState_loaded_messages_count",
            argNames: ["that"],
          );

  @override
  UiConversationMessage? crateApiMessageListCubitMessageListStateMessageAt(
      {required MessageListState that, required int index}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListState(
            that, serializer);
        sse_encode_CastedPrimitive_usize(index, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 30)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_ui_conversation_message,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMessageListCubitMessageListStateMessageAtConstMeta,
      argValues: [that, index],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMessageListCubitMessageListStateMessageAtConstMeta =>
          const TaskConstMeta(
            debugName: "MessageListState_message_at",
            argNames: ["that", "index"],
          );

  @override
  int? crateApiMessageListCubitMessageListStateMessageIdIndex(
      {required MessageListState that,
      required ConversationMessageId messageId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListState(
            that, serializer);
        sse_encode_box_autoadd_conversation_message_id(messageId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_CastedPrimitive_usize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMessageListCubitMessageListStateMessageIdIndexConstMeta,
      argValues: [that, messageId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMessageListCubitMessageListStateMessageIdIndexConstMeta =>
          const TaskConstMeta(
            debugName: "MessageListState_message_id_index",
            argNames: ["that", "messageId"],
          );

  @override
  String? crateApiUserCubitUiUserDisplayName({required UiUser that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiUser(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 32)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUserCubitUiUserDisplayNameConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUserCubitUiUserDisplayNameConstMeta =>
      const TaskConstMeta(
        debugName: "UiUser_display_name",
        argNames: ["that"],
      );

  @override
  ImageData? crateApiUserCubitUiUserProfilePicture({required UiUser that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiUser(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 33)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_image_data,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUserCubitUiUserProfilePictureConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUserCubitUiUserProfilePictureConstMeta =>
      const TaskConstMeta(
        debugName: "UiUser_profile_picture",
        argNames: ["that"],
      );

  @override
  String crateApiUserCubitUiUserUserName({required UiUser that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiUser(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 34)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUserCubitUiUserUserNameConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUserCubitUiUserUserNameConstMeta =>
      const TaskConstMeta(
        debugName: "UiUser_user_name",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiUserCubitUserCubitBaseAddUserToConversation(
      {required UserCubitBase that,
      required ConversationId conversationId,
      required String userName}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserCubitBase(
            that, serializer);
        sse_encode_box_autoadd_conversation_id(conversationId, serializer);
        sse_encode_String(userName, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 35, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiUserCubitUserCubitBaseAddUserToConversationConstMeta,
      argValues: [that, conversationId, userName],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiUserCubitUserCubitBaseAddUserToConversationConstMeta =>
          const TaskConstMeta(
            debugName: "UserCubitBase_add_user_to_conversation",
            argNames: ["that", "conversationId", "userName"],
          );

  @override
  Future<void> crateApiUserCubitUserCubitBaseClose(
      {required UserCubitBase that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserCubitBase(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 36, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUserCubitUserCubitBaseCloseConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUserCubitUserCubitBaseCloseConstMeta =>
      const TaskConstMeta(
        debugName: "UserCubitBase_close",
        argNames: ["that"],
      );

  @override
  Future<List<UiContact>> crateApiUserCubitUserCubitBaseContacts(
      {required UserCubitBase that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserCubitBase(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 37, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_ui_contact,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiUserCubitUserCubitBaseContactsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUserCubitUserCubitBaseContactsConstMeta =>
      const TaskConstMeta(
        debugName: "UserCubitBase_contacts",
        argNames: ["that"],
      );

  @override
  bool crateApiUserCubitUserCubitBaseIsClosed({required UserCubitBase that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserCubitBase(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 38)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUserCubitUserCubitBaseIsClosedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUserCubitUserCubitBaseIsClosedConstMeta =>
      const TaskConstMeta(
        debugName: "UserCubitBase_is_closed",
        argNames: ["that"],
      );

  @override
  UserCubitBase crateApiUserCubitUserCubitBaseNew({required User user}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser(
            user, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 39)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserCubitBase,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUserCubitUserCubitBaseNewConstMeta,
      argValues: [user],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUserCubitUserCubitBaseNewConstMeta =>
      const TaskConstMeta(
        debugName: "UserCubitBase_new",
        argNames: ["user"],
      );

  @override
  Future<void> crateApiUserCubitUserCubitBaseRemoveUserFromConversation(
      {required UserCubitBase that,
      required ConversationId conversationId,
      required String userName}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserCubitBase(
            that, serializer);
        sse_encode_box_autoadd_conversation_id(conversationId, serializer);
        sse_encode_String(userName, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 40, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiUserCubitUserCubitBaseRemoveUserFromConversationConstMeta,
      argValues: [that, conversationId, userName],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiUserCubitUserCubitBaseRemoveUserFromConversationConstMeta =>
          const TaskConstMeta(
            debugName: "UserCubitBase_remove_user_from_conversation",
            argNames: ["that", "conversationId", "userName"],
          );

  @override
  Future<void> crateApiUserCubitUserCubitBaseSetProfile(
      {required UserCubitBase that,
      String? displayName,
      Uint8List? profilePicture}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserCubitBase(
            that, serializer);
        sse_encode_opt_String(displayName, serializer);
        sse_encode_opt_list_prim_u_8_strict(profilePicture, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 41, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiUserCubitUserCubitBaseSetProfileConstMeta,
      argValues: [that, displayName, profilePicture],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUserCubitUserCubitBaseSetProfileConstMeta =>
      const TaskConstMeta(
        debugName: "UserCubitBase_set_profile",
        argNames: ["that", "displayName", "profilePicture"],
      );

  @override
  UiUser crateApiUserCubitUserCubitBaseState({required UserCubitBase that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserCubitBase(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 42)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiUser,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUserCubitUserCubitBaseStateConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUserCubitUserCubitBaseStateConstMeta =>
      const TaskConstMeta(
        debugName: "UserCubitBase_state",
        argNames: ["that"],
      );

  @override
  Stream<UiUser> crateApiUserCubitUserCubitBaseStream(
      {required UserCubitBase that}) {
    final sink = RustStreamSink<UiUser>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserCubitBase(
            that, serializer);
        sse_encode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiUser_Sse(
            sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 43, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUserCubitUserCubitBaseStreamConstMeta,
      argValues: [that, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiUserCubitUserCubitBaseStreamConstMeta =>
      const TaskConstMeta(
        debugName: "UserCubitBase_stream",
        argNames: ["that", "sink"],
      );

  @override
  Future<UiUserProfile?> crateApiUserCubitUserCubitBaseUserProfile(
      {required UserCubitBase that, required String userName}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserCubitBase(
            that, serializer);
        sse_encode_String(userName, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 44, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_ui_user_profile,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiUserCubitUserCubitBaseUserProfileConstMeta,
      argValues: [that, userName],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUserCubitUserCubitBaseUserProfileConstMeta =>
      const TaskConstMeta(
        debugName: "UserCubitBase_user_profile",
        argNames: ["that", "userName"],
      );

  @override
  UuidValue crateApiUserUserClientId({required User that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 45)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Uuid,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUserUserClientIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUserUserClientIdConstMeta => const TaskConstMeta(
        debugName: "User_client_id",
        argNames: ["that"],
      );

  @override
  Future<int> crateApiUserUserGlobalUnreadMessagesCount({required User that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 46, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_CastedPrimitive_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUserUserGlobalUnreadMessagesCountConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUserUserGlobalUnreadMessagesCountConstMeta =>
      const TaskConstMeta(
        debugName: "User_global_unread_messages_count",
        argNames: ["that"],
      );

  @override
  Future<User> crateApiUserUserLoad(
      {required String dbPath,
      required UiUserName userName,
      required UuidValue clientId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(dbPath, serializer);
        sse_encode_box_autoadd_ui_user_name(userName, serializer);
        sse_encode_Uuid(clientId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 47, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiUserUserLoadConstMeta,
      argValues: [dbPath, userName, clientId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUserUserLoadConstMeta => const TaskConstMeta(
        debugName: "User_load",
        argNames: ["dbPath", "userName", "clientId"],
      );

  @override
  Future<List<UiClientRecord>> crateApiUserUserLoadClientRecords(
      {required String dbPath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(dbPath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 48, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_ui_client_record,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiUserUserLoadClientRecordsConstMeta,
      argValues: [dbPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUserUserLoadClientRecordsConstMeta =>
      const TaskConstMeta(
        debugName: "User_load_client_records",
        argNames: ["dbPath"],
      );

  @override
  Future<User?> crateApiUserUserLoadDefault({required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 49, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiUserUserLoadDefaultConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUserUserLoadDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "User_load_default",
        argNames: ["path"],
      );

  @override
  Future<User> crateApiUserUserNew(
      {required String userName,
      required String password,
      required String address,
      required String path,
      PlatformPushToken? pushToken,
      String? displayName,
      Uint8List? profilePicture}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(userName, serializer);
        sse_encode_String(password, serializer);
        sse_encode_String(address, serializer);
        sse_encode_String(path, serializer);
        sse_encode_opt_box_autoadd_platform_push_token(pushToken, serializer);
        sse_encode_opt_String(displayName, serializer);
        sse_encode_opt_list_prim_u_8_strict(profilePicture, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 50, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiUserUserNewConstMeta,
      argValues: [
        userName,
        password,
        address,
        path,
        pushToken,
        displayName,
        profilePicture
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUserUserNewConstMeta => const TaskConstMeta(
        debugName: "User_new",
        argNames: [
          "userName",
          "password",
          "address",
          "path",
          "pushToken",
          "displayName",
          "profilePicture"
        ],
      );

  @override
  Future<void> crateApiUserUserUpdatePushToken(
      {required User that, PlatformPushToken? pushToken}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser(
            that, serializer);
        sse_encode_opt_box_autoadd_platform_push_token(pushToken, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 51, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiUserUserUpdatePushTokenConstMeta,
      argValues: [that, pushToken],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUserUserUpdatePushTokenConstMeta =>
      const TaskConstMeta(
        debugName: "User_update_push_token",
        argNames: ["that", "pushToken"],
      );

  @override
  String crateApiUserUserUserName({required User that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 52)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUserUserUserNameConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUserUserUserNameConstMeta => const TaskConstMeta(
        debugName: "User_user_name",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiLoggingClearAppLogs() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 53, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiLoggingClearAppLogsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLoggingClearAppLogsConstMeta =>
      const TaskConstMeta(
        debugName: "clear_app_logs",
        argNames: [],
      );

  @override
  Future<void> crateApiLoggingClearBackgroundLogs({required String cacheDir}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(cacheDir, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 54, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiLoggingClearBackgroundLogsConstMeta,
      argValues: [cacheDir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLoggingClearBackgroundLogsConstMeta =>
      const TaskConstMeta(
        debugName: "clear_background_logs",
        argNames: ["cacheDir"],
      );

  @override
  Future<ConversationDetailsState>
      crateApiConversationDetailsCubitConversationDetailsStateDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 55, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_conversation_details_state,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiConversationDetailsCubitConversationDetailsStateDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiConversationDetailsCubitConversationDetailsStateDefaultConstMeta =>
          const TaskConstMeta(
            debugName: "conversation_details_state_default",
            argNames: [],
          );

  @override
  Future<ConversationListState>
      crateApiConversationListCubitConversationListStateDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 56, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_conversation_list_state,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiConversationListCubitConversationListStateDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiConversationListCubitConversationListStateDefaultConstMeta =>
          const TaskConstMeta(
            debugName: "conversation_list_state_default",
            argNames: [],
          );

  @override
  Stream<LogEntry> crateApiLoggingCreateLogStream() {
    final s = RustStreamSink<LogEntry>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_log_entry_Sse(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 57, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLoggingCreateLogStreamConstMeta,
      argValues: [s],
      apiImpl: this,
    )));
    return s.stream;
  }

  TaskConstMeta get kCrateApiLoggingCreateLogStreamConstMeta =>
      const TaskConstMeta(
        debugName: "create_log_stream",
        argNames: ["s"],
      );

  @override
  Future<void> crateApiUtilsDeleteClientDatabase(
      {required String dbPath,
      required String userName,
      required UuidValue clientId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(dbPath, serializer);
        sse_encode_String(userName, serializer);
        sse_encode_Uuid(clientId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 58, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiUtilsDeleteClientDatabaseConstMeta,
      argValues: [dbPath, userName, clientId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUtilsDeleteClientDatabaseConstMeta =>
      const TaskConstMeta(
        debugName: "delete_client_database",
        argNames: ["dbPath", "userName", "clientId"],
      );

  @override
  Future<void> crateApiUtilsDeleteDatabases({required String dbPath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(dbPath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 59, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiUtilsDeleteDatabasesConstMeta,
      argValues: [dbPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUtilsDeleteDatabasesConstMeta =>
      const TaskConstMeta(
        debugName: "delete_databases",
        argNames: ["dbPath"],
      );

  @override
  String crateApiTypesImageDataComputeHash({required List<int> bytes}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(bytes, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 60)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesImageDataComputeHashConstMeta,
      argValues: [bytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesImageDataComputeHashConstMeta =>
      const TaskConstMeta(
        debugName: "image_data_compute_hash",
        argNames: ["bytes"],
      );

  @override
  Future<void> crateApiInit() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 61, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInitConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInitConstMeta => const TaskConstMeta(
        debugName: "init",
        argNames: [],
      );

  @override
  Future<void> crateApiMarkdownInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 62, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMarkdownInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMarkdownInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  LogWriter crateApiLoggingInitRustLogging({required String logFile}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(logFile, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 63)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLogWriter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLoggingInitRustLoggingConstMeta,
      argValues: [logFile],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLoggingInitRustLoggingConstMeta =>
      const TaskConstMeta(
        debugName: "init_rust_logging",
        argNames: ["logFile"],
      );

  @override
  Future<MessageContent> crateApiMarkdownMessageContentError(
      {required String message}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(message, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 64, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_message_content,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMarkdownMessageContentErrorConstMeta,
      argValues: [message],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMarkdownMessageContentErrorConstMeta =>
      const TaskConstMeta(
        debugName: "message_content_error",
        argNames: ["message"],
      );

  @override
  Future<MessageContent> crateApiMarkdownMessageContentTryParseMarkdown(
      {required String string}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(string, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 65, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_message_content,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMarkdownMessageContentTryParseMarkdownConstMeta,
      argValues: [string],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMarkdownMessageContentTryParseMarkdownConstMeta =>
      const TaskConstMeta(
        debugName: "message_content_try_parse_markdown",
        argNames: ["string"],
      );

  @override
  MessageContent crateApiMarkdownMessageContentTryParseMarkdownRaw(
      {required List<int> string}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(string, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 66)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_message_content,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMarkdownMessageContentTryParseMarkdownRawConstMeta,
      argValues: [string],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMarkdownMessageContentTryParseMarkdownRawConstMeta =>
          const TaskConstMeta(
            debugName: "message_content_try_parse_markdown_raw",
            argNames: ["string"],
          );

  @override
  Future<String> crateApiLoggingReadAppLogs() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 67, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiLoggingReadAppLogsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLoggingReadAppLogsConstMeta => const TaskConstMeta(
        debugName: "read_app_logs",
        argNames: [],
      );

  @override
  Future<String> crateApiLoggingReadBackgroundLogs({required String cacheDir}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(cacheDir, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 68, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiLoggingReadBackgroundLogsConstMeta,
      argValues: [cacheDir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLoggingReadBackgroundLogsConstMeta =>
      const TaskConstMeta(
        debugName: "read_background_logs",
        argNames: ["cacheDir"],
      );

  @override
  Future<Uint8List> crateApiLoggingTarLogs({required String cacheDir}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(cacheDir, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 69, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiLoggingTarLogsConstMeta,
      argValues: [cacheDir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLoggingTarLogsConstMeta => const TaskConstMeta(
        debugName: "tar_logs",
        argNames: ["cacheDir"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ConversationDetailsCubitBase => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationDetailsCubitBase;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ConversationDetailsCubitBase => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationDetailsCubitBase;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ConversationListCubitBase => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationListCubitBase;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ConversationListCubitBase => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationListCubitBase;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LogWriter => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLogWriter;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LogWriter => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLogWriter;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MessageCubitBase => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageCubitBase;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MessageCubitBase => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageCubitBase;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MessageListCubitBase => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListCubitBase;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MessageListCubitBase => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListCubitBase;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MessageListState => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListState;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MessageListState => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListState;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UiUser => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiUser;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UiUser => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiUser;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_User =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_User =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UserCubitBase => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserCubitBase;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UserCubitBase => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserCubitBase;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  ConversationDetailsCubitBase
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationDetailsCubitBase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConversationDetailsCubitBaseImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ConversationListCubitBase
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationListCubitBase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConversationListCubitBaseImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  LogWriter
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLogWriter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LogWriterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MessageCubitBase
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageCubitBase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MessageCubitBaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MessageListCubitBase
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListCubitBase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MessageListCubitBaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MessageListState
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListState(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MessageListStateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UiUser
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiUser(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UiUserImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  User
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UserImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UserCubitBase
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserCubitBase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UserCubitBaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ConversationDetailsCubitBase
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationDetailsCubitBase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConversationDetailsCubitBaseImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ConversationListCubitBase
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationListCubitBase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConversationListCubitBaseImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  MessageCubitBase
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageCubitBase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MessageCubitBaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MessageListCubitBase
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListCubitBase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MessageListCubitBaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UserCubitBase
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserCubitBase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UserCubitBaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ConversationDetailsCubitBase
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationDetailsCubitBase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConversationDetailsCubitBaseImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ConversationListCubitBase
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationListCubitBase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConversationListCubitBaseImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  LogWriter
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLogWriter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LogWriterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MessageCubitBase
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageCubitBase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MessageCubitBaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MessageListCubitBase
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListCubitBase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MessageListCubitBaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MessageListState
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListState(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MessageListStateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UiUser
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiUser(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UiUserImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  User
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UserImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UserCubitBase
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserCubitBase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UserCubitBaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  int dco_decode_CastedPrimitive_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  DateTime dco_decode_Chrono_Utc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeTimestamp(ts: dco_decode_i_64(raw).toInt(), isUtc: true);
  }

  @protected
  ConversationDetailsCubitBase
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationDetailsCubitBase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConversationDetailsCubitBaseImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ConversationListCubitBase
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationListCubitBase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConversationListCubitBaseImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  LogWriter
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLogWriter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LogWriterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MessageCubitBase
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageCubitBase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MessageCubitBaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MessageListCubitBase
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListCubitBase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MessageListCubitBaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MessageListState
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListState(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MessageListStateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UiUser
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiUser(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UiUserImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  User
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UserImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UserCubitBase
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserCubitBase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UserCubitBaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<MessageListState>
      dco_decode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListState_Sse(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<UiUser>
      dco_decode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiUser_Sse(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<ConversationDetailsState>
      dco_decode_StreamSink_conversation_details_state_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<ConversationListState>
      dco_decode_StreamSink_conversation_list_state_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<LogEntry> dco_decode_StreamSink_log_entry_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<MessageState> dco_decode_StreamSink_message_state_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  UuidValue dco_decode_Uuid(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UuidValue.fromByteList(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  BlockElement dco_decode_block_element(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return BlockElement_Paragraph(
          dco_decode_list_ranged_inline_element(raw[1]),
        );
      case 1:
        return BlockElement_Heading(
          dco_decode_list_ranged_inline_element(raw[1]),
        );
      case 2:
        return BlockElement_Quote(
          dco_decode_list_ranged_block_element(raw[1]),
        );
      case 3:
        return BlockElement_UnorderedList(
          dco_decode_list_list_ranged_block_element(raw[1]),
        );
      case 4:
        return BlockElement_OrderedList(
          dco_decode_u_64(raw[1]),
          dco_decode_list_list_ranged_block_element(raw[2]),
        );
      case 5:
        return BlockElement_Table(
          head: dco_decode_list_list_ranged_block_element(raw[1]),
          rows: dco_decode_list_list_list_ranged_block_element(raw[2]),
        );
      case 6:
        return BlockElement_HorizontalRule();
      case 7:
        return BlockElement_CodeBlock(
          dco_decode_list_record_record_u_32_u_32_string(raw[1]),
        );
      case 8:
        return BlockElement_Error(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  User
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser(
        raw);
  }

  @protected
  ConversationId dco_decode_box_autoadd_conversation_id(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_conversation_id(raw);
  }

  @protected
  ConversationMessageId dco_decode_box_autoadd_conversation_message_id(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_conversation_message_id(raw);
  }

  @protected
  ImageData dco_decode_box_autoadd_image_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_image_data(raw);
  }

  @protected
  MessageState dco_decode_box_autoadd_message_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_message_state(raw);
  }

  @protected
  PlatformPushToken dco_decode_box_autoadd_platform_push_token(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_platform_push_token(raw);
  }

  @protected
  UiConversationDetails dco_decode_box_autoadd_ui_conversation_details(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ui_conversation_details(raw);
  }

  @protected
  UiConversationMessage dco_decode_box_autoadd_ui_conversation_message(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ui_conversation_message(raw);
  }

  @protected
  UiErrorMessage dco_decode_box_autoadd_ui_error_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ui_error_message(raw);
  }

  @protected
  UiEventMessage dco_decode_box_autoadd_ui_event_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ui_event_message(raw);
  }

  @protected
  UiInactiveConversation dco_decode_box_autoadd_ui_inactive_conversation(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ui_inactive_conversation(raw);
  }

  @protected
  UiSystemMessage dco_decode_box_autoadd_ui_system_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ui_system_message(raw);
  }

  @protected
  UiUserName dco_decode_box_autoadd_ui_user_name(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ui_user_name(raw);
  }

  @protected
  UiUserProfile dco_decode_box_autoadd_ui_user_profile(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ui_user_profile(raw);
  }

  @protected
  UiContentMessage dco_decode_box_ui_content_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ui_content_message(raw);
  }

  @protected
  ConversationDetailsState dco_decode_conversation_details_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ConversationDetailsState(
      conversation: dco_decode_opt_box_autoadd_ui_conversation_details(arr[0]),
      members: dco_decode_list_String(arr[1]),
    );
  }

  @protected
  ConversationId dco_decode_conversation_id(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ConversationId(
      uuid: dco_decode_Uuid(arr[0]),
    );
  }

  @protected
  ConversationListState dco_decode_conversation_list_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ConversationListState(
      conversations: dco_decode_list_ui_conversation_details(arr[0]),
    );
  }

  @protected
  ConversationMessageId dco_decode_conversation_message_id(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ConversationMessageId(
      uuid: dco_decode_Uuid(arr[0]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  ImageData dco_decode_image_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ImageData(
      data: dco_decode_list_prim_u_8_strict(arr[0]),
      hash: dco_decode_String(arr[1]),
    );
  }

  @protected
  InlineElement dco_decode_inline_element(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return InlineElement_Text(
          dco_decode_String(raw[1]),
        );
      case 1:
        return InlineElement_Code(
          dco_decode_String(raw[1]),
        );
      case 2:
        return InlineElement_Link(
          destUrl: dco_decode_String(raw[1]),
          children: dco_decode_list_ranged_inline_element(raw[2]),
        );
      case 3:
        return InlineElement_Bold(
          dco_decode_list_ranged_inline_element(raw[1]),
        );
      case 4:
        return InlineElement_Italic(
          dco_decode_list_ranged_inline_element(raw[1]),
        );
      case 5:
        return InlineElement_Strikethrough(
          dco_decode_list_ranged_inline_element(raw[1]),
        );
      case 6:
        return InlineElement_Spoiler(
          dco_decode_list_ranged_inline_element(raw[1]),
        );
      case 7:
        return InlineElement_Image(
          dco_decode_String(raw[1]),
        );
      case 8:
        return InlineElement_TaskListMarker(
          dco_decode_bool(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<List<List<RangedBlockElement>>>
      dco_decode_list_list_list_ranged_block_element(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_list_list_ranged_block_element)
        .toList();
  }

  @protected
  List<List<RangedBlockElement>> dco_decode_list_list_ranged_block_element(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_list_ranged_block_element)
        .toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<RangedBlockElement> dco_decode_list_ranged_block_element(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_ranged_block_element).toList();
  }

  @protected
  List<RangedInlineElement> dco_decode_list_ranged_inline_element(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_ranged_inline_element)
        .toList();
  }

  @protected
  List<((int, int), String)> dco_decode_list_record_record_u_32_u_32_string(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_record_u_32_u_32_string)
        .toList();
  }

  @protected
  List<UiClientRecord> dco_decode_list_ui_client_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_ui_client_record).toList();
  }

  @protected
  List<UiContact> dco_decode_list_ui_contact(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_ui_contact).toList();
  }

  @protected
  List<UiConversationDetails> dco_decode_list_ui_conversation_details(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_ui_conversation_details)
        .toList();
  }

  @protected
  LogEntry dco_decode_log_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return LogEntry(
      time: dco_decode_Chrono_Utc(arr[0]),
      level: dco_decode_log_entry_level(arr[1]),
      target: dco_decode_String(arr[2]),
      msg: dco_decode_String(arr[3]),
    );
  }

  @protected
  LogEntryLevel dco_decode_log_entry_level(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LogEntryLevel.values[raw as int];
  }

  @protected
  MessageContent dco_decode_message_content(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MessageContent(
      content: dco_decode_list_ranged_block_element(arr[0]),
    );
  }

  @protected
  MessageState dco_decode_message_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MessageState(
      message: dco_decode_ui_conversation_message(arr[0]),
    );
  }

  @protected
  int? dco_decode_opt_CastedPrimitive_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_CastedPrimitive_usize(raw);
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  User?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser(
            raw);
  }

  @protected
  ImageData? dco_decode_opt_box_autoadd_image_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_image_data(raw);
  }

  @protected
  PlatformPushToken? dco_decode_opt_box_autoadd_platform_push_token(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_platform_push_token(raw);
  }

  @protected
  UiConversationDetails? dco_decode_opt_box_autoadd_ui_conversation_details(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_ui_conversation_details(raw);
  }

  @protected
  UiConversationMessage? dco_decode_opt_box_autoadd_ui_conversation_message(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_ui_conversation_message(raw);
  }

  @protected
  UiUserProfile? dco_decode_opt_box_autoadd_ui_user_profile(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_ui_user_profile(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  PlatformPushToken dco_decode_platform_push_token(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return PlatformPushToken_Apple(
          dco_decode_String(raw[1]),
        );
      case 1:
        return PlatformPushToken_Google(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  RangedBlockElement dco_decode_ranged_block_element(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return RangedBlockElement(
      range: dco_decode_record_u_32_u_32(arr[0]),
      element: dco_decode_block_element(arr[1]),
    );
  }

  @protected
  RangedInlineElement dco_decode_ranged_inline_element(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return RangedInlineElement(
      range: dco_decode_record_u_32_u_32(arr[0]),
      element: dco_decode_inline_element(arr[1]),
    );
  }

  @protected
  ((int, int), String) dco_decode_record_record_u_32_u_32_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_record_u_32_u_32(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  (int, int) dco_decode_record_u_32_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_u_32(arr[0]),
      dco_decode_u_32(arr[1]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  UiClientRecord dco_decode_ui_client_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return UiClientRecord(
      clientId: dco_decode_Uuid(arr[0]),
      userName: dco_decode_ui_user_name(arr[1]),
      createdAt: dco_decode_Chrono_Utc(arr[2]),
      userProfile: dco_decode_opt_box_autoadd_ui_user_profile(arr[3]),
      isFinished: dco_decode_bool(arr[4]),
    );
  }

  @protected
  UiContact dco_decode_ui_contact(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UiContact(
      userName: dco_decode_String(arr[0]),
    );
  }

  @protected
  UiContentMessage dco_decode_ui_content_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return UiContentMessage(
      sender: dco_decode_String(arr[0]),
      sent: dco_decode_bool(arr[1]),
      content: dco_decode_ui_mimi_content(arr[2]),
    );
  }

  @protected
  UiConversationAttributes dco_decode_ui_conversation_attributes(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return UiConversationAttributes(
      title: dco_decode_String(arr[0]),
      picture: dco_decode_opt_box_autoadd_image_data(arr[1]),
    );
  }

  @protected
  UiConversationDetails dco_decode_ui_conversation_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return UiConversationDetails(
      id: dco_decode_conversation_id(arr[0]),
      status: dco_decode_ui_conversation_status(arr[1]),
      conversationType: dco_decode_ui_conversation_type(arr[2]),
      lastUsed: dco_decode_String(arr[3]),
      attributes: dco_decode_ui_conversation_attributes(arr[4]),
      messagesCount: dco_decode_CastedPrimitive_usize(arr[5]),
      unreadMessages: dco_decode_CastedPrimitive_usize(arr[6]),
      lastMessage: dco_decode_opt_box_autoadd_ui_conversation_message(arr[7]),
    );
  }

  @protected
  UiConversationMessage dco_decode_ui_conversation_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return UiConversationMessage(
      conversationId: dco_decode_conversation_id(arr[0]),
      id: dco_decode_conversation_message_id(arr[1]),
      timestamp: dco_decode_String(arr[2]),
      message: dco_decode_ui_message(arr[3]),
      position: dco_decode_ui_flight_position(arr[4]),
    );
  }

  @protected
  UiConversationStatus dco_decode_ui_conversation_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return UiConversationStatus_Inactive(
          dco_decode_box_autoadd_ui_inactive_conversation(raw[1]),
        );
      case 1:
        return UiConversationStatus_Active();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  UiConversationType dco_decode_ui_conversation_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return UiConversationType_UnconfirmedConnection(
          dco_decode_String(raw[1]),
        );
      case 1:
        return UiConversationType_Connection(
          dco_decode_String(raw[1]),
        );
      case 2:
        return UiConversationType_Group();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  UiErrorMessage dco_decode_ui_error_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UiErrorMessage(
      message: dco_decode_String(arr[0]),
    );
  }

  @protected
  UiEventMessage dco_decode_ui_event_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return UiEventMessage_System(
          dco_decode_box_autoadd_ui_system_message(raw[1]),
        );
      case 1:
        return UiEventMessage_Error(
          dco_decode_box_autoadd_ui_error_message(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  UiFlightPosition dco_decode_ui_flight_position(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UiFlightPosition.values[raw as int];
  }

  @protected
  UiInactiveConversation dco_decode_ui_inactive_conversation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UiInactiveConversation(
      pastMembers: dco_decode_list_String(arr[0]),
    );
  }

  @protected
  UiMessage dco_decode_ui_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return UiMessage_Content(
          dco_decode_box_ui_content_message(raw[1]),
        );
      case 1:
        return UiMessage_Display(
          dco_decode_box_autoadd_ui_event_message(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  UiMimiContent dco_decode_ui_mimi_content(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return UiMimiContent(
      replaces: dco_decode_opt_list_prim_u_8_strict(arr[0]),
      topicId: dco_decode_list_prim_u_8_strict(arr[1]),
      inReplyTo: dco_decode_opt_list_prim_u_8_strict(arr[2]),
      plainBody: dco_decode_String(arr[3]),
      content: dco_decode_message_content(arr[4]),
    );
  }

  @protected
  UiSystemMessage dco_decode_ui_system_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UiSystemMessage(
      message: dco_decode_String(arr[0]),
    );
  }

  @protected
  UiUserName dco_decode_ui_user_name(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return UiUserName(
      userName: dco_decode_String(arr[0]),
      domain: dco_decode_String(arr[1]),
    );
  }

  @protected
  UiUserProfile dco_decode_ui_user_profile(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return UiUserProfile(
      userName: dco_decode_String(arr[0]),
      displayName: dco_decode_opt_String(arr[1]),
      profilePicture: dco_decode_opt_box_autoadd_image_data(arr[2]),
    );
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  ConversationDetailsCubitBase
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationDetailsCubitBase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConversationDetailsCubitBaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ConversationListCubitBase
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationListCubitBase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConversationListCubitBaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LogWriter
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLogWriter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LogWriterImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MessageCubitBase
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageCubitBase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MessageCubitBaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MessageListCubitBase
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListCubitBase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MessageListCubitBaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MessageListState
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListState(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MessageListStateImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UiUser
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiUser(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UiUserImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  User
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UserImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UserCubitBase
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserCubitBase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UserCubitBaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ConversationDetailsCubitBase
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationDetailsCubitBase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConversationDetailsCubitBaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ConversationListCubitBase
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationListCubitBase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConversationListCubitBaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MessageCubitBase
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageCubitBase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MessageCubitBaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MessageListCubitBase
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListCubitBase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MessageListCubitBaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UserCubitBase
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserCubitBase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UserCubitBaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ConversationDetailsCubitBase
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationDetailsCubitBase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConversationDetailsCubitBaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ConversationListCubitBase
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationListCubitBase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConversationListCubitBaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LogWriter
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLogWriter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LogWriterImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MessageCubitBase
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageCubitBase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MessageCubitBaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MessageListCubitBase
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListCubitBase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MessageListCubitBaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MessageListState
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListState(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MessageListStateImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UiUser
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiUser(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UiUserImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  User
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UserImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UserCubitBase
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserCubitBase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UserCubitBaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  int sse_decode_CastedPrimitive_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_usize(deserializer);
    return inner.toInt();
  }

  @protected
  DateTime sse_decode_Chrono_Utc(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return DateTime.fromMicrosecondsSinceEpoch(inner.toInt(), isUtc: true);
  }

  @protected
  ConversationDetailsCubitBase
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationDetailsCubitBase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConversationDetailsCubitBaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ConversationListCubitBase
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationListCubitBase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConversationListCubitBaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LogWriter
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLogWriter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LogWriterImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MessageCubitBase
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageCubitBase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MessageCubitBaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MessageListCubitBase
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListCubitBase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MessageListCubitBaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MessageListState
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListState(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MessageListStateImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UiUser
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiUser(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UiUserImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  User
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UserImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UserCubitBase
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserCubitBase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UserCubitBaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<MessageListState>
      sse_decode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListState_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<UiUser>
      sse_decode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiUser_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<ConversationDetailsState>
      sse_decode_StreamSink_conversation_details_state_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<ConversationListState>
      sse_decode_StreamSink_conversation_list_state_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<LogEntry> sse_decode_StreamSink_log_entry_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<MessageState> sse_decode_StreamSink_message_state_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  UuidValue sse_decode_Uuid(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return UuidValue.fromByteList(inner);
  }

  @protected
  BlockElement sse_decode_block_element(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_list_ranged_inline_element(deserializer);
        return BlockElement_Paragraph(var_field0);
      case 1:
        var var_field0 = sse_decode_list_ranged_inline_element(deserializer);
        return BlockElement_Heading(var_field0);
      case 2:
        var var_field0 = sse_decode_list_ranged_block_element(deserializer);
        return BlockElement_Quote(var_field0);
      case 3:
        var var_field0 =
            sse_decode_list_list_ranged_block_element(deserializer);
        return BlockElement_UnorderedList(var_field0);
      case 4:
        var var_field0 = sse_decode_u_64(deserializer);
        var var_field1 =
            sse_decode_list_list_ranged_block_element(deserializer);
        return BlockElement_OrderedList(var_field0, var_field1);
      case 5:
        var var_head = sse_decode_list_list_ranged_block_element(deserializer);
        var var_rows =
            sse_decode_list_list_list_ranged_block_element(deserializer);
        return BlockElement_Table(head: var_head, rows: var_rows);
      case 6:
        return BlockElement_HorizontalRule();
      case 7:
        var var_field0 =
            sse_decode_list_record_record_u_32_u_32_string(deserializer);
        return BlockElement_CodeBlock(var_field0);
      case 8:
        var var_field0 = sse_decode_String(deserializer);
        return BlockElement_Error(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  User
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser(
        deserializer));
  }

  @protected
  ConversationId sse_decode_box_autoadd_conversation_id(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_conversation_id(deserializer));
  }

  @protected
  ConversationMessageId sse_decode_box_autoadd_conversation_message_id(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_conversation_message_id(deserializer));
  }

  @protected
  ImageData sse_decode_box_autoadd_image_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_image_data(deserializer));
  }

  @protected
  MessageState sse_decode_box_autoadd_message_state(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_message_state(deserializer));
  }

  @protected
  PlatformPushToken sse_decode_box_autoadd_platform_push_token(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_platform_push_token(deserializer));
  }

  @protected
  UiConversationDetails sse_decode_box_autoadd_ui_conversation_details(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ui_conversation_details(deserializer));
  }

  @protected
  UiConversationMessage sse_decode_box_autoadd_ui_conversation_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ui_conversation_message(deserializer));
  }

  @protected
  UiErrorMessage sse_decode_box_autoadd_ui_error_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ui_error_message(deserializer));
  }

  @protected
  UiEventMessage sse_decode_box_autoadd_ui_event_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ui_event_message(deserializer));
  }

  @protected
  UiInactiveConversation sse_decode_box_autoadd_ui_inactive_conversation(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ui_inactive_conversation(deserializer));
  }

  @protected
  UiSystemMessage sse_decode_box_autoadd_ui_system_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ui_system_message(deserializer));
  }

  @protected
  UiUserName sse_decode_box_autoadd_ui_user_name(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ui_user_name(deserializer));
  }

  @protected
  UiUserProfile sse_decode_box_autoadd_ui_user_profile(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ui_user_profile(deserializer));
  }

  @protected
  UiContentMessage sse_decode_box_ui_content_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ui_content_message(deserializer));
  }

  @protected
  ConversationDetailsState sse_decode_conversation_details_state(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_conversation =
        sse_decode_opt_box_autoadd_ui_conversation_details(deserializer);
    var var_members = sse_decode_list_String(deserializer);
    return ConversationDetailsState(
        conversation: var_conversation, members: var_members);
  }

  @protected
  ConversationId sse_decode_conversation_id(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_uuid = sse_decode_Uuid(deserializer);
    return ConversationId(uuid: var_uuid);
  }

  @protected
  ConversationListState sse_decode_conversation_list_state(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_conversations =
        sse_decode_list_ui_conversation_details(deserializer);
    return ConversationListState(conversations: var_conversations);
  }

  @protected
  ConversationMessageId sse_decode_conversation_message_id(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_uuid = sse_decode_Uuid(deserializer);
    return ConversationMessageId(uuid: var_uuid);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  ImageData sse_decode_image_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_data = sse_decode_list_prim_u_8_strict(deserializer);
    var var_hash = sse_decode_String(deserializer);
    return ImageData(data: var_data, hash: var_hash);
  }

  @protected
  InlineElement sse_decode_inline_element(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return InlineElement_Text(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return InlineElement_Code(var_field0);
      case 2:
        var var_destUrl = sse_decode_String(deserializer);
        var var_children = sse_decode_list_ranged_inline_element(deserializer);
        return InlineElement_Link(destUrl: var_destUrl, children: var_children);
      case 3:
        var var_field0 = sse_decode_list_ranged_inline_element(deserializer);
        return InlineElement_Bold(var_field0);
      case 4:
        var var_field0 = sse_decode_list_ranged_inline_element(deserializer);
        return InlineElement_Italic(var_field0);
      case 5:
        var var_field0 = sse_decode_list_ranged_inline_element(deserializer);
        return InlineElement_Strikethrough(var_field0);
      case 6:
        var var_field0 = sse_decode_list_ranged_inline_element(deserializer);
        return InlineElement_Spoiler(var_field0);
      case 7:
        var var_field0 = sse_decode_String(deserializer);
        return InlineElement_Image(var_field0);
      case 8:
        var var_field0 = sse_decode_bool(deserializer);
        return InlineElement_TaskListMarker(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<List<List<RangedBlockElement>>>
      sse_decode_list_list_list_ranged_block_element(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <List<List<RangedBlockElement>>>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_list_list_ranged_block_element(deserializer));
    }
    return ans_;
  }

  @protected
  List<List<RangedBlockElement>> sse_decode_list_list_ranged_block_element(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <List<RangedBlockElement>>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_list_ranged_block_element(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<RangedBlockElement> sse_decode_list_ranged_block_element(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <RangedBlockElement>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ranged_block_element(deserializer));
    }
    return ans_;
  }

  @protected
  List<RangedInlineElement> sse_decode_list_ranged_inline_element(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <RangedInlineElement>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ranged_inline_element(deserializer));
    }
    return ans_;
  }

  @protected
  List<((int, int), String)> sse_decode_list_record_record_u_32_u_32_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <((int, int), String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_record_u_32_u_32_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<UiClientRecord> sse_decode_list_ui_client_record(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UiClientRecord>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ui_client_record(deserializer));
    }
    return ans_;
  }

  @protected
  List<UiContact> sse_decode_list_ui_contact(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UiContact>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ui_contact(deserializer));
    }
    return ans_;
  }

  @protected
  List<UiConversationDetails> sse_decode_list_ui_conversation_details(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UiConversationDetails>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ui_conversation_details(deserializer));
    }
    return ans_;
  }

  @protected
  LogEntry sse_decode_log_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_time = sse_decode_Chrono_Utc(deserializer);
    var var_level = sse_decode_log_entry_level(deserializer);
    var var_target = sse_decode_String(deserializer);
    var var_msg = sse_decode_String(deserializer);
    return LogEntry(
        time: var_time, level: var_level, target: var_target, msg: var_msg);
  }

  @protected
  LogEntryLevel sse_decode_log_entry_level(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return LogEntryLevel.values[inner];
  }

  @protected
  MessageContent sse_decode_message_content(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_content = sse_decode_list_ranged_block_element(deserializer);
    return MessageContent(content: var_content);
  }

  @protected
  MessageState sse_decode_message_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_message = sse_decode_ui_conversation_message(deserializer);
    return MessageState(message: var_message);
  }

  @protected
  int? sse_decode_opt_CastedPrimitive_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_CastedPrimitive_usize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  User?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  ImageData? sse_decode_opt_box_autoadd_image_data(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_image_data(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PlatformPushToken? sse_decode_opt_box_autoadd_platform_push_token(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_platform_push_token(deserializer));
    } else {
      return null;
    }
  }

  @protected
  UiConversationDetails? sse_decode_opt_box_autoadd_ui_conversation_details(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_ui_conversation_details(deserializer));
    } else {
      return null;
    }
  }

  @protected
  UiConversationMessage? sse_decode_opt_box_autoadd_ui_conversation_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_ui_conversation_message(deserializer));
    } else {
      return null;
    }
  }

  @protected
  UiUserProfile? sse_decode_opt_box_autoadd_ui_user_profile(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_ui_user_profile(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PlatformPushToken sse_decode_platform_push_token(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return PlatformPushToken_Apple(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return PlatformPushToken_Google(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  RangedBlockElement sse_decode_ranged_block_element(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_range = sse_decode_record_u_32_u_32(deserializer);
    var var_element = sse_decode_block_element(deserializer);
    return RangedBlockElement(range: var_range, element: var_element);
  }

  @protected
  RangedInlineElement sse_decode_ranged_inline_element(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_range = sse_decode_record_u_32_u_32(deserializer);
    var var_element = sse_decode_inline_element(deserializer);
    return RangedInlineElement(range: var_range, element: var_element);
  }

  @protected
  ((int, int), String) sse_decode_record_record_u_32_u_32_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_record_u_32_u_32(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_u_32_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_32(deserializer);
    var var_field1 = sse_decode_u_32(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  UiClientRecord sse_decode_ui_client_record(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_clientId = sse_decode_Uuid(deserializer);
    var var_userName = sse_decode_ui_user_name(deserializer);
    var var_createdAt = sse_decode_Chrono_Utc(deserializer);
    var var_userProfile =
        sse_decode_opt_box_autoadd_ui_user_profile(deserializer);
    var var_isFinished = sse_decode_bool(deserializer);
    return UiClientRecord(
        clientId: var_clientId,
        userName: var_userName,
        createdAt: var_createdAt,
        userProfile: var_userProfile,
        isFinished: var_isFinished);
  }

  @protected
  UiContact sse_decode_ui_contact(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_userName = sse_decode_String(deserializer);
    return UiContact(userName: var_userName);
  }

  @protected
  UiContentMessage sse_decode_ui_content_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_sender = sse_decode_String(deserializer);
    var var_sent = sse_decode_bool(deserializer);
    var var_content = sse_decode_ui_mimi_content(deserializer);
    return UiContentMessage(
        sender: var_sender, sent: var_sent, content: var_content);
  }

  @protected
  UiConversationAttributes sse_decode_ui_conversation_attributes(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_title = sse_decode_String(deserializer);
    var var_picture = sse_decode_opt_box_autoadd_image_data(deserializer);
    return UiConversationAttributes(title: var_title, picture: var_picture);
  }

  @protected
  UiConversationDetails sse_decode_ui_conversation_details(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_conversation_id(deserializer);
    var var_status = sse_decode_ui_conversation_status(deserializer);
    var var_conversationType = sse_decode_ui_conversation_type(deserializer);
    var var_lastUsed = sse_decode_String(deserializer);
    var var_attributes = sse_decode_ui_conversation_attributes(deserializer);
    var var_messagesCount = sse_decode_CastedPrimitive_usize(deserializer);
    var var_unreadMessages = sse_decode_CastedPrimitive_usize(deserializer);
    var var_lastMessage =
        sse_decode_opt_box_autoadd_ui_conversation_message(deserializer);
    return UiConversationDetails(
        id: var_id,
        status: var_status,
        conversationType: var_conversationType,
        lastUsed: var_lastUsed,
        attributes: var_attributes,
        messagesCount: var_messagesCount,
        unreadMessages: var_unreadMessages,
        lastMessage: var_lastMessage);
  }

  @protected
  UiConversationMessage sse_decode_ui_conversation_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_conversationId = sse_decode_conversation_id(deserializer);
    var var_id = sse_decode_conversation_message_id(deserializer);
    var var_timestamp = sse_decode_String(deserializer);
    var var_message = sse_decode_ui_message(deserializer);
    var var_position = sse_decode_ui_flight_position(deserializer);
    return UiConversationMessage(
        conversationId: var_conversationId,
        id: var_id,
        timestamp: var_timestamp,
        message: var_message,
        position: var_position);
  }

  @protected
  UiConversationStatus sse_decode_ui_conversation_status(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_box_autoadd_ui_inactive_conversation(deserializer);
        return UiConversationStatus_Inactive(var_field0);
      case 1:
        return UiConversationStatus_Active();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  UiConversationType sse_decode_ui_conversation_type(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return UiConversationType_UnconfirmedConnection(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return UiConversationType_Connection(var_field0);
      case 2:
        return UiConversationType_Group();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  UiErrorMessage sse_decode_ui_error_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_message = sse_decode_String(deserializer);
    return UiErrorMessage(message: var_message);
  }

  @protected
  UiEventMessage sse_decode_ui_event_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_ui_system_message(deserializer);
        return UiEventMessage_System(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_ui_error_message(deserializer);
        return UiEventMessage_Error(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  UiFlightPosition sse_decode_ui_flight_position(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return UiFlightPosition.values[inner];
  }

  @protected
  UiInactiveConversation sse_decode_ui_inactive_conversation(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_pastMembers = sse_decode_list_String(deserializer);
    return UiInactiveConversation(pastMembers: var_pastMembers);
  }

  @protected
  UiMessage sse_decode_ui_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_ui_content_message(deserializer);
        return UiMessage_Content(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_ui_event_message(deserializer);
        return UiMessage_Display(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  UiMimiContent sse_decode_ui_mimi_content(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_replaces = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_topicId = sse_decode_list_prim_u_8_strict(deserializer);
    var var_inReplyTo = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_plainBody = sse_decode_String(deserializer);
    var var_content = sse_decode_message_content(deserializer);
    return UiMimiContent(
        replaces: var_replaces,
        topicId: var_topicId,
        inReplyTo: var_inReplyTo,
        plainBody: var_plainBody,
        content: var_content);
  }

  @protected
  UiSystemMessage sse_decode_ui_system_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_message = sse_decode_String(deserializer);
    return UiSystemMessage(message: var_message);
  }

  @protected
  UiUserName sse_decode_ui_user_name(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_userName = sse_decode_String(deserializer);
    var var_domain = sse_decode_String(deserializer);
    return UiUserName(userName: var_userName, domain: var_domain);
  }

  @protected
  UiUserProfile sse_decode_ui_user_profile(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_userName = sse_decode_String(deserializer);
    var var_displayName = sse_decode_opt_String(deserializer);
    var var_profilePicture =
        sse_decode_opt_box_autoadd_image_data(deserializer);
    return UiUserProfile(
        userName: var_userName,
        displayName: var_displayName,
        profilePicture: var_profilePicture);
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationDetailsCubitBase(
          ConversationDetailsCubitBase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConversationDetailsCubitBaseImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationListCubitBase(
          ConversationListCubitBase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConversationListCubitBaseImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLogWriter(
          LogWriter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LogWriterImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageCubitBase(
          MessageCubitBase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MessageCubitBaseImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListCubitBase(
          MessageListCubitBase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MessageListCubitBaseImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListState(
          MessageListState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MessageListStateImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiUser(
          UiUser self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UiUserImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser(
          User self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UserImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserCubitBase(
          UserCubitBase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UserCubitBaseImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationDetailsCubitBase(
          ConversationDetailsCubitBase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConversationDetailsCubitBaseImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationListCubitBase(
          ConversationListCubitBase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConversationListCubitBaseImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageCubitBase(
          MessageCubitBase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MessageCubitBaseImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListCubitBase(
          MessageListCubitBase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MessageListCubitBaseImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserCubitBase(
          UserCubitBase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UserCubitBaseImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationDetailsCubitBase(
          ConversationDetailsCubitBase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConversationDetailsCubitBaseImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationListCubitBase(
          ConversationListCubitBase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConversationListCubitBaseImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLogWriter(
          LogWriter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LogWriterImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageCubitBase(
          MessageCubitBase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MessageCubitBaseImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListCubitBase(
          MessageListCubitBase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MessageListCubitBaseImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListState(
          MessageListState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MessageListStateImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiUser(
          UiUser self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UiUserImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser(
          User self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UserImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserCubitBase(
          UserCubitBase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UserCubitBaseImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void sse_encode_CastedPrimitive_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(sseEncodeCastedPrimitiveU64(self), serializer);
  }

  @protected
  void sse_encode_Chrono_Utc(DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(
        PlatformInt64Util.from(self.microsecondsSinceEpoch), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationDetailsCubitBase(
          ConversationDetailsCubitBase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConversationDetailsCubitBaseImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConversationListCubitBase(
          ConversationListCubitBase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConversationListCubitBaseImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLogWriter(
          LogWriter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LogWriterImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageCubitBase(
          MessageCubitBase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MessageCubitBaseImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListCubitBase(
          MessageListCubitBase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MessageListCubitBaseImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListState(
          MessageListState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MessageListStateImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiUser(
          UiUser self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UiUserImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser(
          User self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UserImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserCubitBase(
          UserCubitBase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UserCubitBaseImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListState_Sse(
          RustStreamSink<MessageListState> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageListState,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void
      sse_encode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiUser_Sse(
          RustStreamSink<UiUser> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUiUser,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_conversation_details_state_Sse(
      RustStreamSink<ConversationDetailsState> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_conversation_details_state,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_conversation_list_state_Sse(
      RustStreamSink<ConversationListState> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_conversation_list_state,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_log_entry_Sse(
      RustStreamSink<LogEntry> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_log_entry,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_message_state_Sse(
      RustStreamSink<MessageState> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_message_state,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_Uuid(UuidValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.toBytes(), serializer);
  }

  @protected
  void sse_encode_block_element(BlockElement self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case BlockElement_Paragraph(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_list_ranged_inline_element(field0, serializer);
      case BlockElement_Heading(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_list_ranged_inline_element(field0, serializer);
      case BlockElement_Quote(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_list_ranged_block_element(field0, serializer);
      case BlockElement_UnorderedList(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_list_list_ranged_block_element(field0, serializer);
      case BlockElement_OrderedList(field0: final field0, field1: final field1):
        sse_encode_i_32(4, serializer);
        sse_encode_u_64(field0, serializer);
        sse_encode_list_list_ranged_block_element(field1, serializer);
      case BlockElement_Table(head: final head, rows: final rows):
        sse_encode_i_32(5, serializer);
        sse_encode_list_list_ranged_block_element(head, serializer);
        sse_encode_list_list_list_ranged_block_element(rows, serializer);
      case BlockElement_HorizontalRule():
        sse_encode_i_32(6, serializer);
      case BlockElement_CodeBlock(field0: final field0):
        sse_encode_i_32(7, serializer);
        sse_encode_list_record_record_u_32_u_32_string(field0, serializer);
      case BlockElement_Error(field0: final field0):
        sse_encode_i_32(8, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser(
          User self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_conversation_id(
      ConversationId self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_conversation_id(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_conversation_message_id(
      ConversationMessageId self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_conversation_message_id(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_image_data(
      ImageData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_image_data(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_message_state(
      MessageState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_message_state(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_platform_push_token(
      PlatformPushToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_platform_push_token(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ui_conversation_details(
      UiConversationDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_conversation_details(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ui_conversation_message(
      UiConversationMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_conversation_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ui_error_message(
      UiErrorMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_error_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ui_event_message(
      UiEventMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_event_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ui_inactive_conversation(
      UiInactiveConversation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_inactive_conversation(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ui_system_message(
      UiSystemMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_system_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ui_user_name(
      UiUserName self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_user_name(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ui_user_profile(
      UiUserProfile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_user_profile(self, serializer);
  }

  @protected
  void sse_encode_box_ui_content_message(
      UiContentMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_content_message(self, serializer);
  }

  @protected
  void sse_encode_conversation_details_state(
      ConversationDetailsState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_ui_conversation_details(
        self.conversation, serializer);
    sse_encode_list_String(self.members, serializer);
  }

  @protected
  void sse_encode_conversation_id(
      ConversationId self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.uuid, serializer);
  }

  @protected
  void sse_encode_conversation_list_state(
      ConversationListState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_ui_conversation_details(self.conversations, serializer);
  }

  @protected
  void sse_encode_conversation_message_id(
      ConversationMessageId self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.uuid, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_image_data(ImageData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.data, serializer);
    sse_encode_String(self.hash, serializer);
  }

  @protected
  void sse_encode_inline_element(InlineElement self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case InlineElement_Text(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case InlineElement_Code(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
      case InlineElement_Link(destUrl: final destUrl, children: final children):
        sse_encode_i_32(2, serializer);
        sse_encode_String(destUrl, serializer);
        sse_encode_list_ranged_inline_element(children, serializer);
      case InlineElement_Bold(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_list_ranged_inline_element(field0, serializer);
      case InlineElement_Italic(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_list_ranged_inline_element(field0, serializer);
      case InlineElement_Strikethrough(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_list_ranged_inline_element(field0, serializer);
      case InlineElement_Spoiler(field0: final field0):
        sse_encode_i_32(6, serializer);
        sse_encode_list_ranged_inline_element(field0, serializer);
      case InlineElement_Image(field0: final field0):
        sse_encode_i_32(7, serializer);
        sse_encode_String(field0, serializer);
      case InlineElement_TaskListMarker(field0: final field0):
        sse_encode_i_32(8, serializer);
        sse_encode_bool(field0, serializer);
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_list_list_ranged_block_element(
      List<List<List<RangedBlockElement>>> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_list_list_ranged_block_element(item, serializer);
    }
  }

  @protected
  void sse_encode_list_list_ranged_block_element(
      List<List<RangedBlockElement>> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_list_ranged_block_element(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_ranged_block_element(
      List<RangedBlockElement> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ranged_block_element(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ranged_inline_element(
      List<RangedInlineElement> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ranged_inline_element(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_record_u_32_u_32_string(
      List<((int, int), String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_record_u_32_u_32_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ui_client_record(
      List<UiClientRecord> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ui_client_record(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ui_contact(
      List<UiContact> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ui_contact(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ui_conversation_details(
      List<UiConversationDetails> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ui_conversation_details(item, serializer);
    }
  }

  @protected
  void sse_encode_log_entry(LogEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Utc(self.time, serializer);
    sse_encode_log_entry_level(self.level, serializer);
    sse_encode_String(self.target, serializer);
    sse_encode_String(self.msg, serializer);
  }

  @protected
  void sse_encode_log_entry_level(
      LogEntryLevel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_message_content(
      MessageContent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_ranged_block_element(self.content, serializer);
  }

  @protected
  void sse_encode_message_state(MessageState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_conversation_message(self.message, serializer);
  }

  @protected
  void sse_encode_opt_CastedPrimitive_usize(
      int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_CastedPrimitive_usize(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser(
          User? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUser(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_image_data(
      ImageData? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_image_data(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_platform_push_token(
      PlatformPushToken? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_platform_push_token(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_ui_conversation_details(
      UiConversationDetails? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_ui_conversation_details(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_ui_conversation_message(
      UiConversationMessage? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_ui_conversation_message(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_ui_user_profile(
      UiUserProfile? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_ui_user_profile(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_platform_push_token(
      PlatformPushToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case PlatformPushToken_Apple(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case PlatformPushToken_Google(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_ranged_block_element(
      RangedBlockElement self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_record_u_32_u_32(self.range, serializer);
    sse_encode_block_element(self.element, serializer);
  }

  @protected
  void sse_encode_ranged_inline_element(
      RangedInlineElement self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_record_u_32_u_32(self.range, serializer);
    sse_encode_inline_element(self.element, serializer);
  }

  @protected
  void sse_encode_record_record_u_32_u_32_string(
      ((int, int), String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_record_u_32_u_32(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_record_u_32_u_32((int, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.$1, serializer);
    sse_encode_u_32(self.$2, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_ui_client_record(
      UiClientRecord self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.clientId, serializer);
    sse_encode_ui_user_name(self.userName, serializer);
    sse_encode_Chrono_Utc(self.createdAt, serializer);
    sse_encode_opt_box_autoadd_ui_user_profile(self.userProfile, serializer);
    sse_encode_bool(self.isFinished, serializer);
  }

  @protected
  void sse_encode_ui_contact(UiContact self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.userName, serializer);
  }

  @protected
  void sse_encode_ui_content_message(
      UiContentMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.sender, serializer);
    sse_encode_bool(self.sent, serializer);
    sse_encode_ui_mimi_content(self.content, serializer);
  }

  @protected
  void sse_encode_ui_conversation_attributes(
      UiConversationAttributes self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.title, serializer);
    sse_encode_opt_box_autoadd_image_data(self.picture, serializer);
  }

  @protected
  void sse_encode_ui_conversation_details(
      UiConversationDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_conversation_id(self.id, serializer);
    sse_encode_ui_conversation_status(self.status, serializer);
    sse_encode_ui_conversation_type(self.conversationType, serializer);
    sse_encode_String(self.lastUsed, serializer);
    sse_encode_ui_conversation_attributes(self.attributes, serializer);
    sse_encode_CastedPrimitive_usize(self.messagesCount, serializer);
    sse_encode_CastedPrimitive_usize(self.unreadMessages, serializer);
    sse_encode_opt_box_autoadd_ui_conversation_message(
        self.lastMessage, serializer);
  }

  @protected
  void sse_encode_ui_conversation_message(
      UiConversationMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_conversation_id(self.conversationId, serializer);
    sse_encode_conversation_message_id(self.id, serializer);
    sse_encode_String(self.timestamp, serializer);
    sse_encode_ui_message(self.message, serializer);
    sse_encode_ui_flight_position(self.position, serializer);
  }

  @protected
  void sse_encode_ui_conversation_status(
      UiConversationStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case UiConversationStatus_Inactive(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_ui_inactive_conversation(field0, serializer);
      case UiConversationStatus_Active():
        sse_encode_i_32(1, serializer);
    }
  }

  @protected
  void sse_encode_ui_conversation_type(
      UiConversationType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case UiConversationType_UnconfirmedConnection(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case UiConversationType_Connection(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
      case UiConversationType_Group():
        sse_encode_i_32(2, serializer);
    }
  }

  @protected
  void sse_encode_ui_error_message(
      UiErrorMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_ui_event_message(
      UiEventMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case UiEventMessage_System(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_ui_system_message(field0, serializer);
      case UiEventMessage_Error(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_ui_error_message(field0, serializer);
    }
  }

  @protected
  void sse_encode_ui_flight_position(
      UiFlightPosition self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_ui_inactive_conversation(
      UiInactiveConversation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.pastMembers, serializer);
  }

  @protected
  void sse_encode_ui_message(UiMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case UiMessage_Content(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_ui_content_message(field0, serializer);
      case UiMessage_Display(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_ui_event_message(field0, serializer);
    }
  }

  @protected
  void sse_encode_ui_mimi_content(
      UiMimiContent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_list_prim_u_8_strict(self.replaces, serializer);
    sse_encode_list_prim_u_8_strict(self.topicId, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.inReplyTo, serializer);
    sse_encode_String(self.plainBody, serializer);
    sse_encode_message_content(self.content, serializer);
  }

  @protected
  void sse_encode_ui_system_message(
      UiSystemMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_ui_user_name(UiUserName self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.userName, serializer);
    sse_encode_String(self.domain, serializer);
  }

  @protected
  void sse_encode_ui_user_profile(
      UiUserProfile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.userName, serializer);
    sse_encode_opt_String(self.displayName, serializer);
    sse_encode_opt_box_autoadd_image_data(self.profilePicture, serializer);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class ConversationDetailsCubitBaseImpl extends RustOpaque
    implements ConversationDetailsCubitBase {
  // Not to be used by end users
  ConversationDetailsCubitBaseImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ConversationDetailsCubitBaseImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_ConversationDetailsCubitBase,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_ConversationDetailsCubitBase,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_ConversationDetailsCubitBasePtr,
  );

  Future<void> close() => RustLib.instance.api
          .crateApiConversationDetailsCubitConversationDetailsCubitBaseClose(
        that: this,
      );

  bool get isClosed => RustLib.instance.api
          .crateApiConversationDetailsCubitConversationDetailsCubitBaseIsClosed(
        that: this,
      );

  /// Load user profile of the conversation (only for non-group conversations)
  Future<UiUserProfile?> loadConversationUserProfile() => RustLib.instance.api
          .crateApiConversationDetailsCubitConversationDetailsCubitBaseLoadConversationUserProfile(
        that: this,
      );

  /// Marks the conversation as read until the given message id (including).
  ///
  /// The calls to this method are debounced with a fixed delay.
  Future<void> markAsRead(
          {required ConversationMessageId untilMessageId,
          required DateTime untilTimestamp}) =>
      RustLib.instance.api
          .crateApiConversationDetailsCubitConversationDetailsCubitBaseMarkAsRead(
              that: this,
              untilMessageId: untilMessageId,
              untilTimestamp: untilTimestamp);

  /// Sends a message to the conversation.
  ///
  /// The not yet sent message is immediately stored in the local store and then the message is
  /// send to the DS.
  Future<void> sendMessage({required String messageText}) => RustLib
      .instance.api
      .crateApiConversationDetailsCubitConversationDetailsCubitBaseSendMessage(
          that: this, messageText: messageText);

  /// Sets the conversation picture.
  ///
  /// When `bytes` is `None`, the conversation picture is removed.
  Future<void> setConversationPicture({Uint8List? bytes}) => RustLib
      .instance.api
      .crateApiConversationDetailsCubitConversationDetailsCubitBaseSetConversationPicture(
          that: this, bytes: bytes);

  ConversationDetailsState get state => RustLib.instance.api
          .crateApiConversationDetailsCubitConversationDetailsCubitBaseState(
        that: this,
      );

  Stream<ConversationDetailsState> stream() => RustLib.instance.api
          .crateApiConversationDetailsCubitConversationDetailsCubitBaseStream(
        that: this,
      );
}

@sealed
class ConversationListCubitBaseImpl extends RustOpaque
    implements ConversationListCubitBase {
  // Not to be used by end users
  ConversationListCubitBaseImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ConversationListCubitBaseImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_ConversationListCubitBase,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_ConversationListCubitBase,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_ConversationListCubitBasePtr,
  );

  Future<void> close() => RustLib.instance.api
          .crateApiConversationListCubitConversationListCubitBaseClose(
        that: this,
      );

  /// Creates a new 1:1 connection with the given user.
  ///
  /// `user_name` is the fully qualified user name of the contact.
  Future<ConversationId> createConnection({required String userName}) => RustLib
      .instance.api
      .crateApiConversationListCubitConversationListCubitBaseCreateConnection(
          that: this, userName: userName);

  /// Creates a new group conversation with the given name.
  ///
  /// After the conversation is created, the current user is the only member of the group.
  Future<ConversationId> createConversation({required String groupName}) => RustLib
      .instance.api
      .crateApiConversationListCubitConversationListCubitBaseCreateConversation(
          that: this, groupName: groupName);

  bool get isClosed => RustLib.instance.api
          .crateApiConversationListCubitConversationListCubitBaseIsClosed(
        that: this,
      );

  ConversationListState get state => RustLib.instance.api
          .crateApiConversationListCubitConversationListCubitBaseState(
        that: this,
      );

  Stream<ConversationListState> stream() => RustLib.instance.api
          .crateApiConversationListCubitConversationListCubitBaseStream(
        that: this,
      );
}

@sealed
class LogWriterImpl extends RustOpaque implements LogWriter {
  // Not to be used by end users
  LogWriterImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LogWriterImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_LogWriter,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_LogWriter,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_LogWriterPtr,
  );

  /// Writes the given log entry with a newline.
  Future<void> writeLine({required String message}) => RustLib.instance.api
      .crateApiLoggingLogWriterWriteLine(that: this, message: message);
}

@sealed
class MessageCubitBaseImpl extends RustOpaque implements MessageCubitBase {
  // Not to be used by end users
  MessageCubitBaseImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MessageCubitBaseImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MessageCubitBase,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MessageCubitBase,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_MessageCubitBasePtr,
  );

  Future<void> close() =>
      RustLib.instance.api.crateApiMessageCubitMessageCubitBaseClose(
        that: this,
      );

  bool get isClosed =>
      RustLib.instance.api.crateApiMessageCubitMessageCubitBaseIsClosed(
        that: this,
      );

  MessageState get state =>
      RustLib.instance.api.crateApiMessageCubitMessageCubitBaseState(
        that: this,
      );

  Stream<MessageState> stream() =>
      RustLib.instance.api.crateApiMessageCubitMessageCubitBaseStream(
        that: this,
      );
}

@sealed
class MessageListCubitBaseImpl extends RustOpaque
    implements MessageListCubitBase {
  // Not to be used by end users
  MessageListCubitBaseImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MessageListCubitBaseImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_MessageListCubitBase,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_MessageListCubitBase,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_MessageListCubitBasePtr,
  );

  Future<void> close() =>
      RustLib.instance.api.crateApiMessageListCubitMessageListCubitBaseClose(
        that: this,
      );

  bool get isClosed =>
      RustLib.instance.api.crateApiMessageListCubitMessageListCubitBaseIsClosed(
        that: this,
      );

  MessageListState get state =>
      RustLib.instance.api.crateApiMessageListCubitMessageListCubitBaseState(
        that: this,
      );

  Stream<MessageListState> stream() =>
      RustLib.instance.api.crateApiMessageListCubitMessageListCubitBaseStream(
        that: this,
      );
}

@sealed
class MessageListStateImpl extends RustOpaque implements MessageListState {
  // Not to be used by end users
  MessageListStateImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MessageListStateImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MessageListState,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MessageListState,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_MessageListStatePtr,
  );

  /// The number of loaded messages in the list
  ///
  /// Note that this is not the number of all messages in the conversation.
  int get loadedMessagesCount => RustLib.instance.api
          .crateApiMessageListCubitMessageListStateLoadedMessagesCount(
        that: this,
      );

  /// Returns the message at the given index.
  UiConversationMessage? messageAt(int index) =>
      RustLib.instance.api.crateApiMessageListCubitMessageListStateMessageAt(
          that: this, index: index);

  /// Returns the lookup table mapping a message id to the index in the list.
  int? messageIdIndex(ConversationMessageId messageId) => RustLib.instance.api
      .crateApiMessageListCubitMessageListStateMessageIdIndex(
          that: this, messageId: messageId);
}

@sealed
class UiUserImpl extends RustOpaque implements UiUser {
  // Not to be used by end users
  UiUserImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  UiUserImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_UiUser,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_UiUser,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_UiUserPtr,
  );

  String? get displayName =>
      RustLib.instance.api.crateApiUserCubitUiUserDisplayName(
        that: this,
      );

  ImageData? get profilePicture =>
      RustLib.instance.api.crateApiUserCubitUiUserProfilePicture(
        that: this,
      );

  String get userName => RustLib.instance.api.crateApiUserCubitUiUserUserName(
        that: this,
      );
}

@sealed
class UserCubitBaseImpl extends RustOpaque implements UserCubitBase {
  // Not to be used by end users
  UserCubitBaseImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  UserCubitBaseImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_UserCubitBase,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_UserCubitBase,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_UserCubitBasePtr,
  );

  Future<void> addUserToConversation(
          ConversationId conversationId, String userName) =>
      RustLib.instance.api.crateApiUserCubitUserCubitBaseAddUserToConversation(
          that: this, conversationId: conversationId, userName: userName);

  Future<void> close() =>
      RustLib.instance.api.crateApiUserCubitUserCubitBaseClose(
        that: this,
      );

  Future<List<UiContact>> get contacts =>
      RustLib.instance.api.crateApiUserCubitUserCubitBaseContacts(
        that: this,
      );

  bool get isClosed =>
      RustLib.instance.api.crateApiUserCubitUserCubitBaseIsClosed(
        that: this,
      );

  Future<void> removeUserFromConversation(
          ConversationId conversationId, String userName) =>
      RustLib.instance.api
          .crateApiUserCubitUserCubitBaseRemoveUserFromConversation(
              that: this, conversationId: conversationId, userName: userName);

  /// Set the display name and/or profile picture of the user.
  Future<void> setProfile({String? displayName, Uint8List? profilePicture}) =>
      RustLib.instance.api.crateApiUserCubitUserCubitBaseSetProfile(
          that: this, displayName: displayName, profilePicture: profilePicture);

  UiUser get state => RustLib.instance.api.crateApiUserCubitUserCubitBaseState(
        that: this,
      );

  Stream<UiUser> stream() =>
      RustLib.instance.api.crateApiUserCubitUserCubitBaseStream(
        that: this,
      );

  /// Get the user profile of the user with the given [`QualifiedUserName`].
  Future<UiUserProfile?> userProfile(String userName) =>
      RustLib.instance.api.crateApiUserCubitUserCubitBaseUserProfile(
          that: this, userName: userName);
}

@sealed
class UserImpl extends RustOpaque implements User {
  // Not to be used by end users
  UserImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  UserImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_User,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_User,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_UserPtr,
  );

  /// The unique identifier of the logged in user
  UuidValue get clientId => RustLib.instance.api.crateApiUserUserClientId(
        that: this,
      );

  /// Total number of unread messages across all conversations
  Future<int> get globalUnreadMessagesCount =>
      RustLib.instance.api.crateApiUserUserGlobalUnreadMessagesCount(
        that: this,
      );

  /// Update the push token.
  Future<void> updatePushToken(PlatformPushToken? pushToken) =>
      RustLib.instance.api
          .crateApiUserUserUpdatePushToken(that: this, pushToken: pushToken);

  /// The user name of the logged in user
  String get userName => RustLib.instance.api.crateApiUserUserUserName(
        that: this,
      );
}
