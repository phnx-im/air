// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unreachable_switch_default, prefer_const_constructors
import 'package:convert/convert.dart';

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'markdown.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:uuid/uuid.dart';
part 'types.freezed.dart';

// These functions are ignored because they are not marked as `pub`: `calculate`, `flight_break_condition`, `from_asset`, `from_bytes`, `from_profile`, `from_qualified_user_name`, `timestamp`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `UiConversation`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`, `hash`

/// Mirror of the [`ConversationId`] types
class ConversationId {
  final UuidValue uuid;

  const ConversationId({
    required this.uuid,
  });

  @override
  String toString() => 'ConversationId($uuid)';

  @override
  int get hashCode => uuid.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ConversationId &&
          runtimeType == other.runtimeType &&
          uuid == other.uuid;
}

/// Mirror of the [`ConversationMessageId`] type
class ConversationMessageId {
  final UuidValue uuid;

  const ConversationMessageId({
    required this.uuid,
  });

  @override
  String toString() => 'ConversationMessageId($uuid)';

  @override
  int get hashCode => uuid.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ConversationMessageId &&
          runtimeType == other.runtimeType &&
          uuid == other.uuid;
}

/// Image binary data together with its hashsum
class ImageData {
  /// The image data
  final Uint8List data;

  /// Opaque hash of the image data as hex string
  final String hash;

  const ImageData({
    required this.data,
    required this.hash,
  });

  /// Computes opaque hashsum of the data and returns it as a hex string.
  static String computeHash(List<int> bytes) =>
      RustLib.instance.api.crateApiTypesImageDataComputeHash(bytes: bytes);

  @override
  int get hashCode => data.hashCode ^ hash.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ImageData &&
          runtimeType == other.runtimeType &&
          data == other.data &&
          hash == other.hash;
}

/// Client record of a user
///
/// Each user has a client record which identifies the users database.
class UiClientRecord {
  /// The unique identifier of the client
  ///
  /// Also used for identifying the client database path.
  final UuidValue clientId;
  final UiUserName userName;
  final DateTime createdAt;
  final UiUserProfile? userProfile;
  final bool isFinished;

  const UiClientRecord({
    required this.clientId,
    required this.userName,
    required this.createdAt,
    this.userProfile,
    required this.isFinished,
  });

  @override
  int get hashCode =>
      clientId.hashCode ^
      userName.hashCode ^
      createdAt.hashCode ^
      userProfile.hashCode ^
      isFinished.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UiClientRecord &&
          runtimeType == other.runtimeType &&
          clientId == other.clientId &&
          userName == other.userName &&
          createdAt == other.createdAt &&
          userProfile == other.userProfile &&
          isFinished == other.isFinished;
}

/// Contact of the logged-in user
class UiContact {
  /// Fully qualified user name
  final String userName;

  const UiContact({
    required this.userName,
  });

  @override
  int get hashCode => userName.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UiContact &&
          runtimeType == other.runtimeType &&
          userName == other.userName;
}

/// Content of a message including the sender and whether it was sent
class UiContentMessage {
  final String sender;
  final bool sent;
  final UiMimiContent content;

  const UiContentMessage({
    required this.sender,
    required this.sent,
    required this.content,
  });

  @override
  int get hashCode => sender.hashCode ^ sent.hashCode ^ content.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UiContentMessage &&
          runtimeType == other.runtimeType &&
          sender == other.sender &&
          sent == other.sent &&
          content == other.content;
}

/// Attributes of a conversation
class UiConversationAttributes {
  /// Title of the conversation
  final String title;

  /// Optional picture of the conversation
  final ImageData? picture;

  const UiConversationAttributes({
    required this.title,
    this.picture,
  });

  @override
  int get hashCode => title.hashCode ^ picture.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UiConversationAttributes &&
          runtimeType == other.runtimeType &&
          title == other.title &&
          picture == other.picture;
}

/// Details of a conversation
class UiConversationDetails {
  final ConversationId id;
  final UiConversationStatus status;
  final UiConversationType conversationType;
  final String lastUsed;
  final UiConversationAttributes attributes;
  final int messagesCount;
  final int unreadMessages;
  final UiConversationMessage? lastMessage;

  const UiConversationDetails({
    required this.id,
    required this.status,
    required this.conversationType,
    required this.lastUsed,
    required this.attributes,
    required this.messagesCount,
    required this.unreadMessages,
    this.lastMessage,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      status.hashCode ^
      conversationType.hashCode ^
      lastUsed.hashCode ^
      attributes.hashCode ^
      messagesCount.hashCode ^
      unreadMessages.hashCode ^
      lastMessage.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UiConversationDetails &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          status == other.status &&
          conversationType == other.conversationType &&
          lastUsed == other.lastUsed &&
          attributes == other.attributes &&
          messagesCount == other.messagesCount &&
          unreadMessages == other.unreadMessages &&
          lastMessage == other.lastMessage;
}

/// A message in a conversation
class UiConversationMessage {
  final ConversationId conversationId;
  final ConversationMessageId id;
  final String timestamp;
  final UiMessage message;
  final UiFlightPosition position;

  const UiConversationMessage({
    required this.conversationId,
    required this.id,
    required this.timestamp,
    required this.message,
    required this.position,
  });

  @override
  int get hashCode =>
      conversationId.hashCode ^
      id.hashCode ^
      timestamp.hashCode ^
      message.hashCode ^
      position.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UiConversationMessage &&
          runtimeType == other.runtimeType &&
          conversationId == other.conversationId &&
          id == other.id &&
          timestamp == other.timestamp &&
          message == other.message &&
          position == other.position;
}

@freezed
sealed class UiConversationStatus with _$UiConversationStatus {
  const UiConversationStatus._();

  const factory UiConversationStatus.inactive(
    UiInactiveConversation field0,
  ) = UiConversationStatus_Inactive;
  const factory UiConversationStatus.active() = UiConversationStatus_Active;
}

@freezed
sealed class UiConversationType with _$UiConversationType {
  const UiConversationType._();

  /// A connection conversation that is not yet confirmed by the other party.
  const factory UiConversationType.unconfirmedConnection(
    String field0,
  ) = UiConversationType_UnconfirmedConnection;

  /// A connection conversation that is confirmed by the other party and for which we have
  /// received the necessary secrets.
  const factory UiConversationType.connection(
    String field0,
  ) = UiConversationType_Connection;

  /// A group conversation, that is, it can contains multiple participants.
  const factory UiConversationType.group() = UiConversationType_Group;
}

/// Error message
class UiErrorMessage {
  final String message;

  const UiErrorMessage({
    required this.message,
  });

  @override
  int get hashCode => message.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UiErrorMessage &&
          runtimeType == other.runtimeType &&
          message == other.message;
}

@freezed
sealed class UiEventMessage with _$UiEventMessage {
  const UiEventMessage._();

  const factory UiEventMessage.system(
    UiSystemMessage field0,
  ) = UiEventMessage_System;
  const factory UiEventMessage.error(
    UiErrorMessage field0,
  ) = UiEventMessage_Error;
}

/// Position of a conversation message in a flight
///
/// A flight is a sequence of messages that are grouped to be displayed together.
enum UiFlightPosition {
  /// The message is the only message in the flight.
  single,

  /// The message is the first message in the flight and the flight has more than one message.
  start,

  /// The message is in the middle of the flight and the flight has more than one message.
  middle,

  /// The message is the last message in the flight and the flight has more than one message.
  end,
  ;
}

/// Inactive conversation with past members
class UiInactiveConversation {
  final List<String> pastMembers;

  const UiInactiveConversation({
    required this.pastMembers,
  });

  @override
  int get hashCode => pastMembers.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UiInactiveConversation &&
          runtimeType == other.runtimeType &&
          pastMembers == other.pastMembers;
}

@freezed
sealed class UiMessage with _$UiMessage {
  const UiMessage._();

  const factory UiMessage.content(
    UiContentMessage field0,
  ) = UiMessage_Content;
  const factory UiMessage.display(
    UiEventMessage field0,
  ) = UiMessage_Display;
}

/// The actual content of a message
@freezed
class UiMimiContent with _$UiMimiContent {
  const factory UiMimiContent({
    Uint8List? replaces,
    required Uint8List topicId,
    Uint8List? inReplyTo,
    required String plainBody,
    required MessageContent content,
  }) = _UiMimiContent;
}

/// System message
class UiSystemMessage {
  final String message;

  const UiSystemMessage({
    required this.message,
  });

  @override
  int get hashCode => message.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UiSystemMessage &&
          runtimeType == other.runtimeType &&
          message == other.message;
}

class UiUserName {
  final String userName;
  final String domain;

  const UiUserName({
    required this.userName,
    required this.domain,
  });

  @override
  int get hashCode => userName.hashCode ^ domain.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UiUserName &&
          runtimeType == other.runtimeType &&
          userName == other.userName &&
          domain == other.domain;
}

/// Profile of a user
class UiUserProfile {
  /// Fully qualified user name
  final String userName;

  /// Optional display name
  final String? displayName;

  /// Optional profile picture
  final ImageData? profilePicture;

  const UiUserProfile({
    required this.userName,
    this.displayName,
    this.profilePicture,
  });

  @override
  int get hashCode =>
      userName.hashCode ^ displayName.hashCode ^ profilePicture.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UiUserProfile &&
          runtimeType == other.runtimeType &&
          userName == other.userName &&
          displayName == other.displayName &&
          profilePicture == other.profilePicture;
}
