// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unreachable_switch_default, prefer_const_constructors
import 'package:convert/convert.dart';

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:uuid/uuid.dart';
import 'types.dart';
part 'user.freezed.dart';

// These functions are ignored because they are not marked as `pub`: `from_core_user`, `load_ui_record`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `from`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<User>>
abstract class User implements RustOpaqueInterface {
  /// The unique identifier of the logged in user
  UuidValue get clientId;

  /// Total number of unread messages across all conversations
  Future<int> get globalUnreadMessagesCount;

  static Future<User> load({
    required String dbPath,
    required UiUserName userName,
    required UuidValue clientId,
  }) => RustLib.instance.api.crateApiUserUserLoad(
    dbPath: dbPath,
    userName: userName,
    clientId: clientId,
  );

  /// Loads all client records from the phnx database
  ///
  /// Also tries to load user profile from the client database. In case the client database
  /// cannot be opened, the client record is skipped.
  static Future<List<UiClientRecord>> loadClientRecords({
    required String dbPath,
  }) => RustLib.instance.api.crateApiUserUserLoadClientRecords(dbPath: dbPath);

  /// Loads the default user from the given database path
  ///
  /// Returns in this order:
  /// * the default most recent user with finished registation, or if none
  /// * the most recent user with finished registration, or if none
  /// * the most recent user, if any.
  static Future<User?> loadDefault({required String path}) =>
      RustLib.instance.api.crateApiUserUserLoadDefault(path: path);

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Creates a new user with the given `user_name`.
  ///
  /// If a user with this name already exists, this will overwrite that user.
  static Future<User> newInstance({
    required String userName,
    required String address,
    required String path,
    PlatformPushToken? pushToken,
    String? displayName,
    Uint8List? profilePicture,
  }) => RustLib.instance.api.crateApiUserUserNew(
    userName: userName,
    address: address,
    path: path,
    pushToken: pushToken,
    displayName: displayName,
    profilePicture: profilePicture,
  );

  /// Update the push token.
  Future<void> updatePushToken(PlatformPushToken? pushToken);

  /// The user name of the logged in user
  String get userName;
}

@freezed
sealed class PlatformPushToken with _$PlatformPushToken {
  const PlatformPushToken._();

  const factory PlatformPushToken.apple(String field0) =
      PlatformPushToken_Apple;
  const factory PlatformPushToken.google(String field0) =
      PlatformPushToken_Google;
}
