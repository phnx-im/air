// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unreachable_switch_default, prefer_const_constructors
import 'package:convert/convert.dart';

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'markdown.dart';
import 'message_content.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:uuid/uuid.dart';
import 'types.dart';
import 'user_cubit.dart';
part 'chat_list_cubit.freezed.dart';

// These functions are ignored because they are not marked as `pub`: `chat_details`, `load_and_emit_state`, `load_chat_details`, `new`, `process_store_notification`, `spawn`, `store_notifications_loop`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `ChatListContext`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `clone`, `eq`, `fmt`, `hash`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChatListCubitBase>>
abstract class ChatListCubitBase implements RustOpaqueInterface {
  Future<void> close();

  /// Creates a new 1:1 connection with the given user via a user handle.
  ///
  /// Returns `None` if the provided handle does not exist.
  Future<ChatId?> createContactChat({required UiUserHandle handle});

  /// Creates a new group chat with the given name.
  ///
  /// After the chat is created, the current user is the only member of the group.
  Future<ChatId> createGroupChat({required String groupName});

  bool get isClosed;

  /// Creates a new chat list cubit.
  ///
  /// Loads the list of chats in the background and listens to the changes in the
  /// chats.
  factory ChatListCubitBase({required UserCubitBase userCubit}) => RustLib
      .instance
      .api
      .crateApiChatListCubitChatListCubitBaseNew(userCubit: userCubit);

  ChatListState get state;

  Stream<ChatListState> stream();
}

/// Represents the state of the list of chat.
@freezed
sealed class ChatListState with _$ChatListState {
  const ChatListState._();
  const factory ChatListState({required List<UiChatDetails> chats}) =
      _ChatListState;
  static Future<ChatListState> default_() =>
      RustLib.instance.api.crateApiChatListCubitChatListStateDefault();
}
