// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unreachable_switch_default, prefer_const_constructors
import 'package:convert/convert.dart';

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'navigation_cubit.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:uuid/uuid.dart';
import 'types.dart';
import 'user.dart';

// These functions are ignored because they are not marked as `pub`: `core_user`, `emit_stored_notifications`, `new`, `show_notifications`, `spawn_emit_stored_notifications`, `spawn_load`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `CubitContext`, `NotificationContext`, `UiUserInner`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `clone`, `drop`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UiUser>>
abstract class UiUser implements RustOpaqueInterface {
  List<UiUserHandle> get userHandles;

  UiUserId get userId;
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserCubitBase>>
abstract class UserCubitBase implements RustOpaqueInterface {
  Future<bool> addUserHandle({required UiUserHandle userHandle});

  Future<void> addUserToChat(ChatId chatId, UiUserId userId);

  Future<List<UiContact>> addableContacts({required ChatId chatId});

  Future<void> close();

  Future<List<UiContact>> get contacts;

  bool get isClosed;

  factory UserCubitBase({
    required User user,
    required NavigationCubitBase navigation,
  }) => RustLib.instance.api.crateApiUserCubitUserCubitBaseNew(
    user: user,
    navigation: navigation,
  );

  Future<void> removeUserFromChat(ChatId chatId, UiUserId userId);

  Future<void> removeUserHandle({required UiUserHandle userHandle});

  Future<void> reportSpam({required UiUserId spammerId});

  Future<void> setAppState({required AppState appState});

  /// Set the display name and/or profile picture of the user.
  Future<void> setProfile({String? displayName, Uint8List? profilePicture});

  UiUser get state;

  Stream<UiUser> stream();
}

enum AppState { background, foreground }
