// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.1.

// ignore_for_file: unreachable_switch_default, prefer_const_constructors
import 'package:convert/convert.dart';

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `from`

/// Assigns the given sink as the log sink on the Rust side.
///
/// If there was already a different sink assigned, it is replaced.
///
/// Call this function to forward logs from the Rust side to the Dart side. This is useful to show
/// logs in the Flutter logging output.
///
/// Only done on Android and iOS. On other platforms, logs are printed to standard error output.
Stream<LogEntry> createLogStream() =>
    RustLib.instance.api.crateApiLoggingCreateLogStream();

/// A log entry sent to the Dart side
class LogEntry {
  /// The timestamp of the log entry
  final DateTime time;

  /// The log level
  final LogEntryLevel level;

  /// The target of the log entry (module path)
  final String target;

  /// The log message
  ///
  /// Structured data is attached to the end of the message as formatted key-value pairs.
  final String msg;

  const LogEntry({
    required this.time,
    required this.level,
    required this.target,
    required this.msg,
  });

  @override
  int get hashCode =>
      time.hashCode ^ level.hashCode ^ target.hashCode ^ msg.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is LogEntry &&
          runtimeType == other.runtimeType &&
          time == other.time &&
          level == other.level &&
          target == other.target &&
          msg == other.msg;
}

/// The log level
enum LogEntryLevel {
  trace,
  debug,
  info,
  warn,
  error,
  ;
}
