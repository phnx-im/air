// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unreachable_switch_default, prefer_const_constructors
import 'package:convert/convert.dart';

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:uuid/uuid.dart';
import 'types.dart';
import 'user_cubit.dart';
part 'conversation_list_cubit.freezed.dart';

// These functions are ignored because they are not marked as `pub`: `converation_into_ui_details`, `conversation_details`, `load_and_emit_state`, `new`, `process_store_notification`, `spawn`, `store_notifications_loop`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `ConversationListContext`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `clone`, `eq`, `fmt`, `hash`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConversationListCubitBase>>
abstract class ConversationListCubitBase implements RustOpaqueInterface {
  Future<void> close();

  /// Creates a new 1:1 connection with the given user.
  ///
  /// `client_id` is the unique client id of the contact.
  Future<ConversationId> createConnection({required UiClientId clientId});

  /// Creates a new group conversation with the given name.
  ///
  /// After the conversation is created, the current user is the only member of the group.
  Future<ConversationId> createConversation({required String groupName});

  bool get isClosed;

  /// Creates a new conversation list cubit.
  ///
  /// Loads the list of conversations in the background and listens to the changes in the
  /// conversations.
  factory ConversationListCubitBase({required UserCubitBase userCubit}) =>
      RustLib.instance.api
          .crateApiConversationListCubitConversationListCubitBaseNew(
            userCubit: userCubit,
          );

  ConversationListState get state;

  Stream<ConversationListState> stream();
}

/// Represents the state of the list of conversations.
@freezed
class ConversationListState with _$ConversationListState {
  const ConversationListState._();
  const factory ConversationListState({
    required List<UiConversationDetails> conversations,
  }) = _ConversationListState;
  static Future<ConversationListState> default_() =>
      RustLib.instance.api
          .crateApiConversationListCubitConversationListStateDefault();
}
