// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unreachable_switch_default, prefer_const_constructors
import 'package:convert/convert.dart';

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'markdown.dart';
import 'message_content.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:uuid/uuid.dart';
import 'types.dart';
import 'user_cubit.dart';

// These functions are ignored because they are not marked as `pub`: `load_and_emit_state`, `new`, `notify_neghbors_of_added_message`, `process_store_notification`, `rebuild_from_messages`, `spawn`, `store_notifications_loop`, `try_process_store_notification`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `MessageListContext`, `MessageListStateInner`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `fmt`, `fmt`
// These functions are ignored (category: IgnoreBecauseOwnerTyShouldIgnore): `default`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MessageListCubitBase>>
abstract class MessageListCubitBase implements RustOpaqueInterface {
  Future<void> close();

  bool get isClosed;

  factory MessageListCubitBase({
    required UserCubitBase userCubit,
    required ChatId chatId,
  }) => RustLib.instance.api.crateApiMessageListCubitMessageListCubitBaseNew(
    userCubit: userCubit,
    chatId: chatId,
  );

  MessageListState get state;

  Stream<MessageListState> stream();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MessageListState>>
abstract class MessageListState implements RustOpaqueInterface {
  static Future<MessageListState> default_() =>
      RustLib.instance.api.crateApiMessageListCubitMessageListStateDefault();

  bool isNewMessage(MessageId messageId);

  /// The number of loaded messages in the list
  ///
  /// Note that this is not the number of all messages in the chat.
  int get loadedMessagesCount;

  /// Returns the message at the given index.
  UiChatMessage? messageAt(int index);

  /// Returns the lookup table mapping a message id to the index in the list.
  int? messageIdIndex(MessageId messageId);
}
