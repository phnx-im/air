# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

require 'xcodeproj'
require 'plist'

default_platform(:ios)

platform :android do
  desc "Build and release the app"
  lane :deploy do
    # Package name
    package_name = "im.phnx.prototype"
    track = "internal"

    # Decode the keystore from the base64 string and save it to a temporary file
    keystore_path = "release-key.jks"
    base64_keystore = ENV["ANDROID_KEYSTORE_BASE64"]
    UI.user_error!("ANDROID_KEYSTORE_BASE64 environment variable is missing!") if base64_keystore.nil?
    File.open(keystore_path, "wb") do |file|
      file.write(Base64.decode64(base64_keystore))
    end

    # Decode the Play Store key from the base64 string and save it to a temporary file
    playstore_key_path = "playstorekey.json"
    base64_playstore_key = ENV["ANDROID_PLAYSTORE_KEY_JSON"]
    UI.user_error!("ANDROID_PLAYSTORE_KEY_JSON environment variable is missing!") if base64_playstore_key.nil?
    File.open(playstore_key_path, "wb") do |file|
      file.write(Base64.decode64(base64_playstore_key))
    end

    begin
      # Get the previous build number
      previous_build_number = google_play_track_version_codes(
        track: track,
        package_name: package_name,
        json_key: "fastlane/" + playstore_key_path,
      )[0]
      current_build_number = previous_build_number + 1

      # Increment the build number in the gradle file
      increment_version_code(
        gradle_file_path: "android/app/build.gradle",
        version_code: current_build_number
      )

      # We build the app in release mode with Flutter first to set up gradle
      sh "flutter build appbundle --release"

      # Build the bundle in release mode and sign it
      gradle(
        task: "bundle",
        build_type: "Release",
        project_dir: File.expand_path("../android"),
        properties: {
          "android.injected.signing.store.file" => File.expand_path(keystore_path),
          "android.injected.signing.store.password" => ENV["ANDROID_KEY_PASSWORD"],
          "android.injected.signing.key.alias" => "upload",
          "android.injected.signing.key.password" => ENV["ANDROID_KEY_PASSWORD"]
        }
      )

      # Upload to Google Play Store
      supply(
        validate_only: false,
        release_status: "draft",
        version_code: current_build_number,
        track: track,
        aab: "build/app/outputs/bundle/release/app-release.aab",
        json_key: "fastlane/" + playstore_key_path,
        package_name: package_name,
      )
    rescue => e
      UI.error(e)
      raise
    ensure
      # Clean up the temporary files
      File.delete(keystore_path)
      File.delete(playstore_key_path)
    end
  end
end

platform :ios do
  desc "Build app for TestFlight"
  lane :beta_ios do |options|
    # Set XCode version
    xcodes(
      version: '16.1',
      select_for_current_build_only: true,
    )
  
    # Set up CI
    setup_ci()
  
    # Set parameters
    key_id = ENV['APP_STORE_KEY_ID']
    issuer_id = ENV['APP_STORE_ISSUER_ID']
    key_content = ENV['APP_STORE_KEY_P8_BASE64']
    team_id = ENV['TEAM_ID']
    matchType = "appstore"
    app_identifier = "im.phnx.prototype"
    app_identifier_nse = "im.phnx.prototype.nse"
  
    # Load the app store connect API key
    api_key = app_store_connect_api_key(
      key_id: key_id,
      issuer_id: issuer_id,
      key_content: key_content,
      is_key_content_base64: true,
      in_house: false
    )
  
    # Determine build number
    build_number = if options[:build_number]
                    options[:build_number].to_i
                  else
                    latest_testflight_build_number(
                      version: "1.0.0",
                      api_key: api_key,
                      app_identifier: app_identifier
                    ) + 1
                  end
  
    increment_build_number(
      xcodeproj: "ios/Runner.xcodeproj",
      build_number: build_number,
    )
  
    # Use match for code signing
    ["development", "appstore"].each do |i|
      match(
        type: i,
        git_url: ENV['MATCH_GIT_URL'],
        git_basic_authorization: ENV['MATCH_GIT_BASIC_AUTHORIZATION'],
        git_branch: "main",
        storage_mode: "git",
        app_identifier: [app_identifier, app_identifier_nse],
        team_id: team_id,
        readonly: is_ci,
      )
    end
  
    # Install flutter dependencies
    sh "flutter pub get"
  
    # Install CocoaPods dependencies
    cocoapods(
      clean: true,
      podfile: "ios/Podfile"
    )
    
    # Build the app
    build_app(
      workspace: "ios/Runner.xcworkspace", 
      scheme: "Runner",
      export_method: "app-store",
    )
  
    # Upload the app to TestFlight if the parameter is set
    if options[:upload_to_test_flight]
      upload_to_testflight(
        api_key: api_key, 
        skip_waiting_for_build_processing: true,
        distribute_external: false,
      )
    end
  end
end
