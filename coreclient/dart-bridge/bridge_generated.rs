#![allow(

// SPDX-FileCopyrightText: 2023 Phoenix R&D GmbH <hello@phnx.im>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.75.3.

use crate::dart_api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::types::ActiveConversation;
use crate::types::ContentMessage;
use crate::types::Conversation;
use crate::types::ConversationAttributes;
use crate::types::ConversationMessage;
use crate::types::ConversationStatus;
use crate::types::ConversationType;
use crate::types::DispatchedConversationMessage;
use crate::types::DisplayMessage;
use crate::types::DisplayMessageType;
use crate::types::ErrorMessage;
use crate::types::InactiveConversation;
use crate::types::Message;
use crate::types::MessageContentType;
use crate::types::NotificationType;
use crate::types::Ping;
use crate::types::SystemMessage;
use crate::types::TextMessage;
use crate::types::UuidBytes;

// Section: wire functions

fn wire_init_lib_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "init_lib",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(init_lib()),
    )
}
fn wire_initialize_backend__method__RustState_impl(
    port_: MessagePort,
    that: impl Wire2Api<RustState> + UnwindSafe,
    url: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "initialize_backend__method__RustState",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_url = url.wire2api();
            move |task_callback| Ok(RustState::initialize_backend(&api_that, api_url))
        },
    )
}
fn wire_create_user__method__RustState_impl(
    port_: MessagePort,
    that: impl Wire2Api<RustState> + UnwindSafe,
    username: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_user__method__RustState",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_username = username.wire2api();
            move |task_callback| RustState::create_user(&api_that, api_username)
        },
    )
}
fn wire_create_conversation__method__RustState_impl(
    port_: MessagePort,
    that: impl Wire2Api<RustState> + UnwindSafe,
    name: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_conversation__method__RustState",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_name = name.wire2api();
            move |task_callback| RustState::create_conversation(&api_that, api_name)
        },
    )
}
fn wire_get_conversations__method__RustState_impl(
    port_: MessagePort,
    that: impl Wire2Api<RustState> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_conversations__method__RustState",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Ok(RustState::get_conversations(&api_that))
        },
    )
}
fn wire_invite_user__method__RustState_impl(
    port_: MessagePort,
    that: impl Wire2Api<RustState> + UnwindSafe,
    conversation_id: impl Wire2Api<UuidBytes> + UnwindSafe,
    username: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "invite_user__method__RustState",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_conversation_id = conversation_id.wire2api();
            let api_username = username.wire2api();
            move |task_callback| {
                RustState::invite_user(&api_that, api_conversation_id, api_username)
            }
        },
    )
}
fn wire_send_message__method__RustState_impl(
    port_: MessagePort,
    that: impl Wire2Api<RustState> + UnwindSafe,
    conversation_id: impl Wire2Api<UuidBytes> + UnwindSafe,
    message: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "send_message__method__RustState",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_conversation_id = conversation_id.wire2api();
            let api_message = message.wire2api();
            move |task_callback| {
                RustState::send_message(&api_that, api_conversation_id, api_message)
            }
        },
    )
}
fn wire_get_messages__method__RustState_impl(
    port_: MessagePort,
    that: impl Wire2Api<RustState> + UnwindSafe,
    conversation_id: impl Wire2Api<UuidBytes> + UnwindSafe,
    last_n: impl Wire2Api<usize> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_messages__method__RustState",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_conversation_id = conversation_id.wire2api();
            let api_last_n = last_n.wire2api();
            move |task_callback| {
                Ok(RustState::get_messages(
                    &api_that,
                    api_conversation_id,
                    api_last_n,
                ))
            }
        },
    )
}
fn wire_get_clients__method__RustState_impl(
    port_: MessagePort,
    that: impl Wire2Api<RustState> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_clients__method__RustState",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Ok(RustState::get_clients(&api_that))
        },
    )
}
fn wire_register_stream__method__RustState_impl(
    port_: MessagePort,
    that: impl Wire2Api<RustState> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "register_stream__method__RustState",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| RustState::register_stream(&api_that, task_callback.stream_sink())
        },
    )
}
fn wire_fetch_messages__method__RustState_impl(
    port_: MessagePort,
    that: impl Wire2Api<RustState> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "fetch_messages__method__RustState",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| RustState::fetch_messages(&api_that)
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<usize> for usize {
    fn wire2api(self) -> usize {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for ActiveConversation {
    fn into_dart(self) -> support::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ActiveConversation {}

impl support::IntoDart for ContentMessage {
    fn into_dart(self) -> support::DartAbi {
        vec![self.sender.into_dart(), self.content.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ContentMessage {}

impl support::IntoDart for Conversation {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_dart(),
            self.status.into_dart(),
            self.conversation_type.into_dart(),
            self.last_used.into_dart(),
            self.attributes.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Conversation {}

impl support::IntoDart for ConversationAttributes {
    fn into_dart(self) -> support::DartAbi {
        vec![self.title.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ConversationAttributes {}

impl support::IntoDart for ConversationMessage {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_dart(),
            self.timestamp.into_dart(),
            self.message.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ConversationMessage {}

impl support::IntoDart for ConversationStatus {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Inactive(field0) => vec![0.into_dart(), field0.into_dart()],
            Self::Active(field0) => vec![1.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ConversationStatus {}
impl support::IntoDart for ConversationType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::OneToOne => 0,
            Self::Group => 1,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ConversationType {}
impl support::IntoDart for DispatchedConversationMessage {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.conversation_id.into_dart(),
            self.conversation_message.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DispatchedConversationMessage {}

impl support::IntoDart for DisplayMessage {
    fn into_dart(self) -> support::DartAbi {
        vec![self.message.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DisplayMessage {}

impl support::IntoDart for DisplayMessageType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::System(field0) => vec![0.into_dart(), field0.into_dart()],
            Self::Error(field0) => vec![1.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DisplayMessageType {}
impl support::IntoDart for ErrorMessage {
    fn into_dart(self) -> support::DartAbi {
        vec![self.message.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ErrorMessage {}

impl support::IntoDart for InactiveConversation {
    fn into_dart(self) -> support::DartAbi {
        vec![self.past_members.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for InactiveConversation {}

impl support::IntoDart for Message {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Content(field0) => vec![0.into_dart(), field0.into_dart()],
            Self::Display(field0) => vec![1.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Message {}
impl support::IntoDart for MessageContentType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Text(field0) => vec![0.into_dart(), field0.into_dart()],
            Self::Ping(field0) => vec![1.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MessageContentType {}
impl support::IntoDart for NotificationType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::ConversationChange => vec![0.into_dart()],
            Self::Message(field0) => vec![1.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for NotificationType {}
impl support::IntoDart for Ping {
    fn into_dart(self) -> support::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Ping {}

impl support::IntoDart for RustState {
    fn into_dart(self) -> support::DartAbi {
        vec![self.corelib.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for RustState {}

impl support::IntoDart for SystemMessage {
    fn into_dart(self) -> support::DartAbi {
        vec![self.message.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for SystemMessage {}

impl support::IntoDart for TextMessage {
    fn into_dart(self) -> support::DartAbi {
        vec![self.message.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TextMessage {}

impl support::IntoDart for UuidBytes {
    fn into_dart(self) -> support::DartAbi {
        vec![self.bytes.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for UuidBytes {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
mod io {
    use super::*;
    // Section: wire functions

    #[no_mangle]
    pub extern "C" fn wire_init_lib(port_: i64) {
        wire_init_lib_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_initialize_backend__method__RustState(
        port_: i64,
        that: *mut wire_RustState,
        url: *mut wire_uint_8_list,
    ) {
        wire_initialize_backend__method__RustState_impl(port_, that, url)
    }

    #[no_mangle]
    pub extern "C" fn wire_create_user__method__RustState(
        port_: i64,
        that: *mut wire_RustState,
        username: *mut wire_uint_8_list,
    ) {
        wire_create_user__method__RustState_impl(port_, that, username)
    }

    #[no_mangle]
    pub extern "C" fn wire_create_conversation__method__RustState(
        port_: i64,
        that: *mut wire_RustState,
        name: *mut wire_uint_8_list,
    ) {
        wire_create_conversation__method__RustState_impl(port_, that, name)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_conversations__method__RustState(
        port_: i64,
        that: *mut wire_RustState,
    ) {
        wire_get_conversations__method__RustState_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn wire_invite_user__method__RustState(
        port_: i64,
        that: *mut wire_RustState,
        conversation_id: *mut wire_UuidBytes,
        username: *mut wire_uint_8_list,
    ) {
        wire_invite_user__method__RustState_impl(port_, that, conversation_id, username)
    }

    #[no_mangle]
    pub extern "C" fn wire_send_message__method__RustState(
        port_: i64,
        that: *mut wire_RustState,
        conversation_id: *mut wire_UuidBytes,
        message: *mut wire_uint_8_list,
    ) {
        wire_send_message__method__RustState_impl(port_, that, conversation_id, message)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_messages__method__RustState(
        port_: i64,
        that: *mut wire_RustState,
        conversation_id: *mut wire_UuidBytes,
        last_n: usize,
    ) {
        wire_get_messages__method__RustState_impl(port_, that, conversation_id, last_n)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_clients__method__RustState(port_: i64, that: *mut wire_RustState) {
        wire_get_clients__method__RustState_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn wire_register_stream__method__RustState(
        port_: i64,
        that: *mut wire_RustState,
    ) {
        wire_register_stream__method__RustState_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn wire_fetch_messages__method__RustState(
        port_: i64,
        that: *mut wire_RustState,
    ) {
        wire_fetch_messages__method__RustState_impl(port_, that)
    }

    // Section: allocate functions

    #[no_mangle]
    pub extern "C" fn new_MutexCorelibDartNotifier() -> wire_MutexCorelibDartNotifier {
        wire_MutexCorelibDartNotifier::new_with_null_ptr()
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_rust_state_0() -> *mut wire_RustState {
        support::new_leak_box_ptr(wire_RustState::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_uuid_bytes_0() -> *mut wire_UuidBytes {
        support::new_leak_box_ptr(wire_UuidBytes::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_uint_8_list_0(len: i32) -> *mut wire_uint_8_list {
        let ans = wire_uint_8_list {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(ans)
    }

    // Section: related functions

    #[no_mangle]
    pub extern "C" fn drop_opaque_MutexCorelibDartNotifier(ptr: *const c_void) {
        unsafe {
            Arc::<Mutex<Corelib<DartNotifier>>>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn share_opaque_MutexCorelibDartNotifier(ptr: *const c_void) -> *const c_void {
        unsafe {
            Arc::<Mutex<Corelib<DartNotifier>>>::increment_strong_count(ptr as _);
            ptr
        }
    }

    // Section: impl Wire2Api

    impl Wire2Api<RustOpaque<Mutex<Corelib<DartNotifier>>>> for wire_MutexCorelibDartNotifier {
        fn wire2api(self) -> RustOpaque<Mutex<Corelib<DartNotifier>>> {
            unsafe { support::opaque_from_dart(self.ptr as _) }
        }
    }
    impl Wire2Api<String> for *mut wire_uint_8_list {
        fn wire2api(self) -> String {
            let vec: Vec<u8> = self.wire2api();
            String::from_utf8_lossy(&vec).into_owned()
        }
    }
    impl Wire2Api<RustState> for *mut wire_RustState {
        fn wire2api(self) -> RustState {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<RustState>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<UuidBytes> for *mut wire_UuidBytes {
        fn wire2api(self) -> UuidBytes {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<UuidBytes>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<RustState> for wire_RustState {
        fn wire2api(self) -> RustState {
            RustState {
                corelib: self.corelib.wire2api(),
            }
        }
    }

    impl Wire2Api<[u8; 16]> for *mut wire_uint_8_list {
        fn wire2api(self) -> [u8; 16] {
            let vec: Vec<u8> = self.wire2api();
            support::from_vec_to_array(vec)
        }
    }
    impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
        fn wire2api(self) -> Vec<u8> {
            unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }

    impl Wire2Api<UuidBytes> for wire_UuidBytes {
        fn wire2api(self) -> UuidBytes {
            UuidBytes {
                bytes: self.bytes.wire2api(),
            }
        }
    }
    // Section: wire structs

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_MutexCorelibDartNotifier {
        ptr: *const core::ffi::c_void,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_RustState {
        corelib: wire_MutexCorelibDartNotifier,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_uint_8_list {
        ptr: *mut u8,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_UuidBytes {
        bytes: *mut wire_uint_8_list,
    }

    // Section: impl NewWithNullPtr

    pub trait NewWithNullPtr {
        fn new_with_null_ptr() -> Self;
    }

    impl<T> NewWithNullPtr for *mut T {
        fn new_with_null_ptr() -> Self {
            std::ptr::null_mut()
        }
    }

    impl NewWithNullPtr for wire_MutexCorelibDartNotifier {
        fn new_with_null_ptr() -> Self {
            Self {
                ptr: core::ptr::null(),
            }
        }
    }

    impl NewWithNullPtr for wire_RustState {
        fn new_with_null_ptr() -> Self {
            Self {
                corelib: wire_MutexCorelibDartNotifier::new_with_null_ptr(),
            }
        }
    }

    impl Default for wire_RustState {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_UuidBytes {
        fn new_with_null_ptr() -> Self {
            Self {
                bytes: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_UuidBytes {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    // Section: sync execution mode utility

    #[no_mangle]
    pub extern "C" fn free_WireSyncReturn(ptr: support::WireSyncReturn) {
        unsafe {
            let _ = support::box_from_leak_ptr(ptr);
        };
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
