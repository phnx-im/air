// SPDX-FileCopyrightText: 2025 Phoenix R&D GmbH <hello@phnx.im>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

syntax = "proto3";

package delivery_service.v1;

import "common/v1/common.proto";

service DeliveryService {
  // unauthenticated
  rpc RequestGroupId(RequestGroupIdRequest) returns (RequestGroupIdResponse);

  rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse);

  rpc WelcomeInfo(WelcomeInfoRequest) returns (WelcomeInfoResponse);

  rpc ExternalCommitInfo(ExternalCommitInfoRequest) returns (ExternalCommitInfoResponse);

  rpc ConnectionGroupInfo(ConnectionGroupInfoRequest) returns (ConnectionGroupInfoResponse);

  rpc JoinConnectionGroup(JoinConnectionGroupRequest) returns (JoinConnectionGroupResponse);

  rpc Resync(ResyncRequest) returns (ResyncResponse);

  rpc SelfRemove(SelfRemoveRequest) returns (SelfRemoveResponse);

  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);

  rpc DeleteGroup(DeleteGroupRequest) returns (DeleteGroupResponse);

  rpc GroupOperation(GroupOperationRequest) returns (GroupOperationResponse);

  rpc UpdateProfileKey(UpdateProfileKeyRequest) returns (UpdateProfileKeyResponse);

  // Generates an attachment ID and returns a pre-signed URL for uploading an attachment.
  //
  // The actual upload is done by the client.
  //
  // Note: An attachment is always provisioned relative to a specific group.
  rpc ProvisionAttachment(ProvisionAttachmentRequest) returns (ProvisionAttachmentResponse);

  // Returns a URL for downloading attachment.
  //
  // The actual download is done by the client.
  //
  // Note: An attachment is always retrieved relative to a specific group.
  rpc GetAttachmentUrl(GetAttachmentUrlRequest) returns (GetAttachmentUrlResponse);
}

// common messages

message LeafNodeIndex {
  uint32 index = 1;
}

message GroupStateEarKey {
  bytes key = 1;
}

message RatchetTree {
  bytes tls = 1;
}

message MlsMessage {
  bytes tls = 1;
}

message AssistedMessage {
  bytes tls = 1;
}

message RoomState {
  bytes tls = 1;
}

// request group id

message RequestGroupIdRequest {}

message RequestGroupIdResponse {
  common.v1.QualifiedGroupId group_id = 1;
}

// create group

message CreateGroupRequest {
  CreateGroupPayload payload = 1;
  common.v1.Signature signature = 2;
}

message CreateGroupResponse {}

message CreateGroupPayload {
  common.v1.QualifiedGroupId qgid = 1;
  GroupStateEarKey group_state_ear_key = 2;
  RatchetTree ratchet_tree = 3;
  EncryptedUserProfileKey encrypted_user_profile_key = 5;
  QsReference creator_client_reference = 6;
  MlsMessage group_info = 7;
  RoomState room_state = 8;
}

message EncryptedUserProfileKey {
  common.v1.Ciphertext ciphertext = 1;
}

message QsReference {
  common.v1.Fqdn client_homeserver_domain = 1;
  SealedClientReference sealed_reference = 2;
}

message SealedClientReference {
  common.v1.HpkeCiphertext ciphertext = 1;
}

// welcome info

message WelcomeInfoRequest {
  common.v1.Signature signature = 1;
  WelcomeInfoPayload payload = 2;
}

message WelcomeInfoPayload {
  common.v1.QualifiedGroupId qgid = 1;
  GroupStateEarKey group_state_ear_key = 2;
  ClientVerifyingKey sender = 3;
  GroupEpoch epoch = 4;
}

message ClientVerifyingKey {
  bytes bytes = 1;
}

message GroupEpoch {
  uint64 value = 1;
}

message WelcomeInfoResponse {
  RatchetTree ratchet_tree = 1;
  repeated EncryptedUserProfileKey encrypted_user_profile_keys = 3;
  RoomState room_state = 4;
}

// external commit info

message ExternalCommitInfoRequest {
  common.v1.QualifiedGroupId qgid = 1;
  GroupStateEarKey group_state_ear_key = 2;
}

message ExternalCommitInfoResponse {
  GroupInfo group_info = 1;
  RatchetTree ratchet_tree = 2;
  repeated EncryptedUserProfileKey encrypted_user_profile_keys = 4;
  RoomState room_state = 5;
  repeated MlsMessage proposals = 6;
}

message GroupInfo {
  bytes tls = 1;
}

// connection group info

message ConnectionGroupInfoRequest {
  common.v1.QualifiedGroupId group_id = 1;
  GroupStateEarKey group_state_ear_key = 2;
}

message ConnectionGroupInfoResponse {
  GroupInfo group_info = 1;
  RatchetTree ratchet_tree = 2;
  repeated EncryptedUserProfileKey encrypted_user_profile_keys = 4;
  RoomState room_state = 5;
  repeated MlsMessage proposals = 6;
}

// join connection group

message JoinConnectionGroupRequest {
  GroupStateEarKey group_state_ear_key = 1;
  AssistedMessage external_commit = 2;
  QsReference qs_client_reference = 3;
}

message JoinConnectionGroupResponse {
  common.v1.Timestamp fanout_timestamp = 1;
}

// resync

message ResyncRequest {
  ResyncPayload payload = 1;
  common.v1.Signature signature = 2;
  // Index of the sender before processing the commit
  LeafNodeIndex sender_index = 3; 
}

message ResyncPayload {
  GroupStateEarKey group_state_ear_key = 1;
  AssistedMessage external_commit = 2;
  LeafNodeIndex sender = 3;
}

message ResyncResponse {
  common.v1.Timestamp fanout_timestamp = 1;
}

// self remove

message SelfRemoveRequest {
  common.v1.Signature signature = 1;
  SelfRemovePayload payload = 2;
}

message SelfRemovePayload {
  GroupStateEarKey group_state_ear_key = 1;
  AssistedMessage remove_proposal = 2;
}

message SelfRemoveResponse {
  common.v1.Timestamp fanout_timestamp = 1;
}

// send message

message SendMessageRequest {
  SendMessagePayload payload = 1;
  common.v1.Signature signature = 2;
}

message SendMessagePayload {
  GroupStateEarKey group_state_ear_key = 1;
  AssistedMessage message = 2;
  LeafNodeIndex sender = 3;
}

message SendMessageResponse {
  common.v1.Timestamp fanout_timestamp = 1;
}

// delete group

message DeleteGroupRequest {
  DeleteGroupPayload payload = 1;
  common.v1.Signature signature = 2;
}

message DeleteGroupPayload {
  GroupStateEarKey group_state_ear_key = 1;
  AssistedMessage commit = 2;
}

message DeleteGroupResponse {
  common.v1.Timestamp fanout_timestamp = 1;
}

// group operation

message GroupOperationRequest {
  GroupOperationPayload payload = 1;
  common.v1.Signature signature = 2;
}

message GroupOperationPayload {
  GroupStateEarKey group_state_ear_key = 1;
  AssistedMessage commit = 2;
  optional AddUsersInfo add_users_info = 3;
}

message AddUsersInfo {
  MlsMessage welcome = 1;
  repeated EncryptedWelcomeAttributionInfo encrypted_welcome_attribution_info = 2;
}

message EncryptedWelcomeAttributionInfo {
  common.v1.Ciphertext ciphertext = 1;
}

message GroupOperationResponse {
  common.v1.Timestamp fanout_timestamp = 1;
}

// update profile key

message UpdateProfileKeyRequest {
  common.v1.Signature signature = 1;
  UpdateProfileKeyPayload payload = 2;
}

message UpdateProfileKeyPayload {
  GroupStateEarKey group_state_ear_key = 1;
  common.v1.QualifiedGroupId group_id = 2;
  LeafNodeIndex sender = 3;
  EncryptedUserProfileKey encrypted_user_profile_key = 4;
}

message UpdateProfileKeyResponse {}

// provision attachment

message ProvisionAttachmentRequest {
  ProvisionAttachmentPayload payload = 1;
  common.v1.Signature signature = 2;
}

message ProvisionAttachmentPayload {
  GroupStateEarKey group_state_ear_key = 1;
  common.v1.QualifiedGroupId group_id = 2;
  LeafNodeIndex sender = 3;
}

message ProvisionAttachmentResponse {
  common.v1.Uuid attachment_id = 1;
  common.v1.ExpirationData upload_url_expiration = 2;
  string upload_url = 4; // non-empty
  repeated HeaderEntry upload_headers = 5; // can be empty
}

message HeaderEntry {
  string key = 1;
  string value = 2;
}

// get attachment url

message GetAttachmentUrlRequest {
  GetAttachmentUrlPayload payload = 1;
  common.v1.Signature signature = 2;
}

message GetAttachmentUrlPayload {
  GroupStateEarKey group_state_ear_key = 1;
  common.v1.QualifiedGroupId group_id = 2;
  LeafNodeIndex sender = 3;
  common.v1.Uuid attachment_id = 4;
}

message GetAttachmentUrlResponse {
  common.v1.ExpirationData download_url_expiration = 1;
  string download_url = 2;
  repeated HeaderEntry download_headers = 3;
}
