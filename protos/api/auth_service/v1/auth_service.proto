// SPDX-FileCopyrightText: 2025 Phoenix R&D GmbH <hello@phnx.im>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

syntax = "proto3";

package auth_service.v1;

import "common/v1/common.proto";

service AuthService {
  rpc RegisterUser(RegisterUserRequest) returns (RegisterUserResponse);
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);

  rpc PublishConnectionPackages(PublishConnectionPackagesRequest) returns (PublishConnectionPackagesResponse);
  rpc GetUserConnectionPackages(GetUserConnectionPackagesRequest) returns (GetUserConnectionPackagesResponse);

  rpc PublishKeyPackages(PublishKeyPackagesRequest) returns (PublishKeyPackagesResponse);
  rpc KeyPackage(KeyPackageRequest) returns (KeyPackageResponse);

  rpc UpdateUserProfile(UpdateUserProfileRequest) returns (UpdateUserProfileResponse);
  rpc GetUserProfile(GetUserProfileRequest) returns (GetUserProfileResponse);

  rpc AsCredentials(AsCredentialsRequest) returns (AsCredentialsResponse);

  rpc IssueTokens(IssueTokensRequest) returns (IssueTokensResponse);

  rpc EnqueueMessages(EnqueueMessagesRequest) returns (EnqueueMessagesResponse);
  rpc DequeueMessages(DequeueMessagesRequest) returns (DequeueMessagesResponse);
}

// common

message AsClientId {
  common.v1.QualifiedUserName user_name = 1;
  common.v1.Uuid client_id = 2;
}

message MlsInfraVersion {
  uint32 version = 1;
}

message ExpirationData {
  common.v1.Timestamp not_before = 1;
  common.v1.Timestamp not_after = 2;
}

message EncryptedUserProfile {
  common.v1.Ciphertext ciphertext = 1;
}

message ConnectionPackage {
  ConnectionPackagePayload payload = 1;
  common.v1.Signature signature = 2;
}

message ConnectionPackagePayload {
  MlsInfraVersion protocol_version = 1;
  ConnectionEncryptionKey encryption_key = 2;
  ExpirationData lifetime = 3;
  ClientCredential client_credential = 4;
}

message ConnectionEncryptionKey {
  bytes bytes = 1;
}

message ClientCredential {
  ClientCredentialPayload payload = 1;
  common.v1.Signature signature = 2;
}

message ClientCredentialPayload {
  ClientCredentialCsr csr = 1;
  ExpirationData expiration_data = 2;
  CredentialFingerprint credential_fingerprint = 3;
}

message ClientCredentialCsr {
  uint32 msl_version = 1;
  AsClientId client_id = 2;
  SignatureScheme signature_scheme = 3;
  ClientVerifyingKey verifying_key = 4;
}

enum SignatureScheme {
  SIGNATURE_SCHEME_UNSPECIFIED = 0;
  SIGNATURE_SCHEME_ECDSA_SECP256R1_SHA256 = 0x0403;
  SIGNATURE_SCHEME_ECDSA_SECP384R1_SHA384 = 0x0503;
  SIGNATURE_SCHEME_ECDSA_SECP521R1_SHA512 = 0x0603;
  SIGNATURE_SCHEME_ED25519 = 0x0807;
  SIGNATURE_SCHEME_ED448 = 0x0808;
}

message ClientVerifyingKey {
  bytes bytes = 1;
}

message CredentialFingerprint {
  bytes bytes = 1;
}

// register user

message RegisterUserRequest {
  ClientCredentialPayload client_credential_payload = 1;
  common.v1.RatchetEncryptionKey queue_encryption_key = 2;
  common.v1.RatchetSecret initial_ratchet_secret = 3;
  EncryptedUserProfile encrypted_user_profile = 4;
}

message RegisterUserResponse {
  ClientCredential client_credential = 1;
}

// delete user

message DeleteUserRequest {
  DeleteUserPayload payload = 1;
  common.v1.Signature signature = 2;
}

message DeleteUserPayload {
  common.v1.QualifiedUserName user_name = 1;
  AsClientId client_id = 2;
}

message DeleteUserResponse {}

// publish connection package

message PublishConnectionPackagesRequest {
  PublishConnectionPackagesPayload payload = 1;
  common.v1.Signature signature = 2;
}

message PublishConnectionPackagesPayload {
  AsClientId client_id = 1;
  repeated ConnectionPackage connection_packages = 2;
}

message PublishConnectionPackagesResponse {}

// get user connection packages

message GetUserConnectionPackagesRequest {
  common.v1.QualifiedUserName user_name = 1;
}

message GetUserConnectionPackagesResponse {
  repeated ConnectionPackage connection_packages = 1;
}

// update user profile

message UpdateUserProfileRequest {
  UpdateUserProfilePayload payload = 1;
  common.v1.Signature signature = 2;
}

message UpdateUserProfilePayload {
  AsClientId client_id = 1;
  EncryptedUserProfile encrypted_user_profile = 2;
}

message UpdateUserProfileResponse {}

// get user profile

message GetUserProfileRequest {
  AsClientId client_id = 1;
}

message GetUserProfileResponse {
  EncryptedUserProfile encrypted_user_profile = 1;
}

// as credentials

message AsCredentialsRequest {}

message AsCredentialsResponse {
  repeated AsCredential as_credentials = 1;
  repeated AsIntermediateCredential as_intermediate_credentials = 2;
  repeated CredentialFingerprint revoked_credentials = 3;
}

message AsCredential {
  AsCredentialBody body = 1;
  CredentialFingerprint fingerprint = 2;
}

message AsCredentialBody {
  MlsInfraVersion version = 1;
  common.v1.Fqdn as_domain = 2;
  ExpirationData expiration_data = 3;
  SignatureScheme signature_scheme = 4;
  AsVerifyingKey verifying_key = 5;
}

message AsVerifyingKey {
  bytes bytes = 1;
}

message AsIntermediateCredential {
  AsIntermediateCredentialBody body = 1;
  CredentialFingerprint fingerprint = 2;
}

message AsIntermediateCredentialBody {
  AsIntermediateCredentialPayload credential = 1;
  common.v1.Signature signature = 2;
}

message AsIntermediateCredentialPayload {
  AsIntermediateCredentialCsr csr = 1;
  ExpirationData expiration_data = 2;
  CredentialFingerprint signer_fingerprint = 3;
}

message AsIntermediateCredentialCsr {
  MlsInfraVersion version = 1;
  common.v1.Fqdn as_domain = 2;
  SignatureScheme signature_scheme = 3;
  AsIntermediateVerifyingKey verifying_key = 4;
}

message AsIntermediateVerifyingKey {
  bytes bytes = 1;
}

// issue tokens

message IssueTokensRequest {
  IssueTokensRequestTbs payload = 1;
  common.v1.Signature signature = 2;
}

message IssueTokensRequestTbs {
  AsClientId client_id = 1;
  AsTokenType token_type = 2;
  TokenRequest token_request = 3;
}

enum AsTokenType {
  AS_TOKEN_TYPE_UNSPECIFIED = 0;
  AS_TOKEN_TYPE_AS_ENQEUEU = 1;
  AS_TOKEN_TYPE_DS_GROUP_CREATION = 2;
  AS_TOKEN_TYPE_DS_GROUP_OPERATION = 3;
}

enum TokenType {
  TOKEN_TYPE_UNSPECIFIED = 0;
  TOKEN_TYPE_PRIVATE_TOKEN = 1;
  TOKEN_TYPE_PUBLIC_TOKEN = 2;
  TOKEN_TYPE_BATCHED_TOKEN_RISTRETTO_255 = 0xF91A;
  TOKEN_TYPE_BATCHED_TOKEN_P384 = 0xF901;
}

message TokenRequest {
  TokenType token_type = 1;
  uint32 truncated_token_id = 2;
  repeated bytes blinded_elements = 3;
}

message IssueTokensResponse {
  repeated TokenResponse token_responses = 1;
}

message TokenResponse {
  repeated bytes evaluated_elements = 1;
  bytes evaulated_proof = 2;
}

// enqueue messages

message EnqueueMessagesRequest {
  AsClientId client_id = 1;
  EncryptedConnectionEstablishmentPackage connection_establishment_package = 2;
}

message EncryptedConnectionEstablishmentPackage {
  common.v1.HpkeCiphertext ciphertext = 1;
}

message EnqueueMessagesResponse {}

// dequeue messages

message DequeueMessagesRequest {
  DequeueMessagesPayload payload = 1;
  common.v1.Signature signature = 2;
}

message DequeueMessagesPayload {
  AsClientId sender = 1;
  uint64 sequence_number_start = 2;
  uint64 max_message_number = 3;
}

message DequeueMessagesResponse {
  repeated QueueMessage messages = 1;
  uint64 remaining_messages_number = 2;
}

message QueueMessage {
  uint64 sequence_number = 1;
  common.v1.Ciphertext ciphertext = 2;
}
