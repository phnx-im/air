// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.36.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'dart_api.dart';
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'types.freezed.dart';

class ConversationIdBytes {
  final U8Array16 bytes;

  const ConversationIdBytes({
    required this.bytes,
  });

  @override
  int get hashCode => bytes.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ConversationIdBytes &&
          runtimeType == other.runtimeType &&
          bytes == other.bytes;
}

class GroupIdBytes {
  final Uint8List bytes;

  const GroupIdBytes({
    required this.bytes,
  });

  @override
  int get hashCode => bytes.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is GroupIdBytes &&
          runtimeType == other.runtimeType &&
          bytes == other.bytes;
}

class UiContact {
  final String userName;

  const UiContact({
    required this.userName,
  });

  @override
  int get hashCode => userName.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UiContact &&
          runtimeType == other.runtimeType &&
          userName == other.userName;
}

class UiContentMessage {
  final String sender;
  final bool sent;
  final UiMimiContent content;

  const UiContentMessage({
    required this.sender,
    required this.sent,
    required this.content,
  });

  @override
  int get hashCode => sender.hashCode ^ sent.hashCode ^ content.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UiContentMessage &&
          runtimeType == other.runtimeType &&
          sender == other.sender &&
          sent == other.sent &&
          content == other.content;
}

class UiConversation {
  final ConversationIdBytes id;
  final GroupIdBytes groupId;
  final UiConversationStatus status;
  final UiConversationType conversationType;
  final BigInt lastUsed;
  final UiConversationAttributes attributes;

  const UiConversation({
    required this.id,
    required this.groupId,
    required this.status,
    required this.conversationType,
    required this.lastUsed,
    required this.attributes,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      groupId.hashCode ^
      status.hashCode ^
      conversationType.hashCode ^
      lastUsed.hashCode ^
      attributes.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UiConversation &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          groupId == other.groupId &&
          status == other.status &&
          conversationType == other.conversationType &&
          lastUsed == other.lastUsed &&
          attributes == other.attributes;
}

class UiConversationAttributes {
  final String title;
  final Uint8List? conversationPictureOption;

  const UiConversationAttributes({
    required this.title,
    this.conversationPictureOption,
  });

  @override
  int get hashCode => title.hashCode ^ conversationPictureOption.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UiConversationAttributes &&
          runtimeType == other.runtimeType &&
          title == other.title &&
          conversationPictureOption == other.conversationPictureOption;
}

class UiConversationMessage {
  final ConversationIdBytes conversationId;
  final UuidBytes id;
  final DateTime timestamp;
  final UiMessage message;

  const UiConversationMessage({
    required this.conversationId,
    required this.id,
    required this.timestamp,
    required this.message,
  });

  @override
  int get hashCode =>
      conversationId.hashCode ^
      id.hashCode ^
      timestamp.hashCode ^
      message.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UiConversationMessage &&
          runtimeType == other.runtimeType &&
          conversationId == other.conversationId &&
          id == other.id &&
          timestamp == other.timestamp &&
          message == other.message;
}

@freezed
sealed class UiConversationStatus with _$UiConversationStatus {
  const UiConversationStatus._();

  const factory UiConversationStatus.inactive(
    UiInactiveConversation field0,
  ) = UiConversationStatus_Inactive;
  const factory UiConversationStatus.active() = UiConversationStatus_Active;
}

@freezed
sealed class UiConversationType with _$UiConversationType {
  const UiConversationType._();

  const factory UiConversationType.unconfirmedConnection(
    String field0,
  ) = UiConversationType_UnconfirmedConnection;
  const factory UiConversationType.connection(
    String field0,
  ) = UiConversationType_Connection;
  const factory UiConversationType.group() = UiConversationType_Group;
}

class UiErrorMessage {
  final String message;

  const UiErrorMessage({
    required this.message,
  });

  @override
  int get hashCode => message.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UiErrorMessage &&
          runtimeType == other.runtimeType &&
          message == other.message;
}

@freezed
sealed class UiEventMessage with _$UiEventMessage {
  const UiEventMessage._();

  const factory UiEventMessage.system(
    UiSystemMessage field0,
  ) = UiEventMessage_System;
  const factory UiEventMessage.error(
    UiErrorMessage field0,
  ) = UiEventMessage_Error;
}

class UiInactiveConversation {
  final List<String> pastMembers;

  const UiInactiveConversation({
    required this.pastMembers,
  });

  @override
  int get hashCode => pastMembers.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UiInactiveConversation &&
          runtimeType == other.runtimeType &&
          pastMembers == other.pastMembers;
}

@freezed
sealed class UiMessage with _$UiMessage {
  const UiMessage._();

  const factory UiMessage.content(
    UiContentMessage field0,
  ) = UiMessage_Content;
  const factory UiMessage.display(
    UiEventMessage field0,
  ) = UiMessage_Display;
  const factory UiMessage.unsent(
    UiMimiContent field0,
  ) = UiMessage_Unsent;
}

class UiMessageId {
  final UuidBytes id;
  final String domain;

  const UiMessageId({
    required this.id,
    required this.domain,
  });

  @override
  int get hashCode => id.hashCode ^ domain.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UiMessageId &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          domain == other.domain;
}

class UiMimiContent {
  final UiMessageId id;
  final BigInt timestamp;
  final UiMessageId? replaces;
  final Uint8List? topicId;
  final BigInt? expires;
  final UiReplyToInfo? inReplyTo;
  final List<UiMessageId> lastSeen;
  final String body;

  const UiMimiContent({
    required this.id,
    required this.timestamp,
    this.replaces,
    this.topicId,
    this.expires,
    this.inReplyTo,
    required this.lastSeen,
    required this.body,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      timestamp.hashCode ^
      replaces.hashCode ^
      topicId.hashCode ^
      expires.hashCode ^
      inReplyTo.hashCode ^
      lastSeen.hashCode ^
      body.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UiMimiContent &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          timestamp == other.timestamp &&
          replaces == other.replaces &&
          topicId == other.topicId &&
          expires == other.expires &&
          inReplyTo == other.inReplyTo &&
          lastSeen == other.lastSeen &&
          body == other.body;
}

@freezed
sealed class UiNotificationType with _$UiNotificationType {
  const UiNotificationType._();

  const factory UiNotificationType.conversationChange(
    ConversationIdBytes field0,
  ) = UiNotificationType_ConversationChange;
  const factory UiNotificationType.message(
    UiConversationMessage field0,
  ) = UiNotificationType_Message;
}

class UiReplyToInfo {
  final UiMessageId messageId;
  final Uint8List hash;

  const UiReplyToInfo({
    required this.messageId,
    required this.hash,
  });

  @override
  int get hashCode => messageId.hashCode ^ hash.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UiReplyToInfo &&
          runtimeType == other.runtimeType &&
          messageId == other.messageId &&
          hash == other.hash;
}

class UiSystemMessage {
  final String message;

  const UiSystemMessage({
    required this.message,
  });

  @override
  int get hashCode => message.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UiSystemMessage &&
          runtimeType == other.runtimeType &&
          message == other.message;
}

class UiUserProfile {
  final String userName;
  final String? displayName;
  final Uint8List? profilePictureOption;

  const UiUserProfile({
    required this.userName,
    this.displayName,
    this.profilePictureOption,
  });

  @override
  int get hashCode =>
      userName.hashCode ^ displayName.hashCode ^ profilePictureOption.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UiUserProfile &&
          runtimeType == other.runtimeType &&
          userName == other.userName &&
          displayName == other.displayName &&
          profilePictureOption == other.profilePictureOption;
}

class UuidBytes {
  final U8Array16 bytes;

  const UuidBytes({
    required this.bytes,
  });

  @override
  int get hashCode => bytes.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UuidBytes &&
          runtimeType == other.runtimeType &&
          bytes == other.bytes;
}
