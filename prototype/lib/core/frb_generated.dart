// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.36.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';
import 'dart_api.dart';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'mobile_logging.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'types.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.36';

  @override
  int get rustContentHash => 1149215322;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_prototype',
    ioDirectory: '../applogic/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateDartApiRustUserAddUsersToConversation(
      {required RustUser that,
      required ConversationIdBytes conversationId,
      required List<String> userNames,
      dynamic hint});

  Future<UiContact?> crateDartApiRustUserContact(
      {required RustUser that, required String userName, dynamic hint});

  Future<void> crateDartApiRustUserCreateConnection(
      {required RustUser that, required String userName, dynamic hint});

  Future<ConversationIdBytes> crateDartApiRustUserCreateConversation(
      {required RustUser that, required String name, dynamic hint});

  Future<void> crateDartApiRustUserFetchMessages(
      {required RustUser that, dynamic hint});

  Future<void> crateDartApiRustUserFlushDebouncerState(
      {required RustUser that, dynamic hint});

  Future<List<UiContact>> crateDartApiRustUserGetContacts(
      {required RustUser that, dynamic hint});

  Future<List<UiConversation>> crateDartApiRustUserGetConversations(
      {required RustUser that, dynamic hint});

  Future<List<UiConversationMessage>> crateDartApiRustUserGetMessages(
      {required RustUser that,
      required ConversationIdBytes conversationId,
      required int lastN,
      dynamic hint});

  Future<void> crateDartApiRustUserMarkMessagesAsReadDebounced(
      {required RustUser that,
      required ConversationIdBytes conversationId,
      required BigInt timestamp,
      dynamic hint});

  Future<List<UiContact>> crateDartApiRustUserMemberCandidates(
      {required RustUser that,
      required ConversationIdBytes conversationId,
      dynamic hint});

  Future<List<String>> crateDartApiRustUserMembersOfConversation(
      {required RustUser that,
      required ConversationIdBytes conversationId,
      dynamic hint});

  Future<UiUserProfile> crateDartApiRustUserOwnUserProfile(
      {required RustUser that, dynamic hint});

  Future<void> crateDartApiRustUserRemoveUsersFromConversation(
      {required RustUser that,
      required ConversationIdBytes conversationId,
      required List<String> userNames,
      dynamic hint});

  Future<UiConversationMessage> crateDartApiRustUserSendMessage(
      {required RustUser that,
      required ConversationIdBytes conversationId,
      required String message,
      dynamic hint});

  Future<void> crateDartApiRustUserSetConversationPicture(
      {required RustUser that,
      required ConversationIdBytes conversationId,
      Uint8List? conversationPicture,
      dynamic hint});

  Future<void> crateDartApiRustUserSetUserProfile(
      {required RustUser that,
      required String displayName,
      Uint8List? profilePictureOption,
      dynamic hint});

  Future<String> crateDartApiRustUserUserName(
      {required RustUser that, dynamic hint});

  Future<UiUserProfile?> crateDartApiRustUserUserProfile(
      {required RustUser that, required String userName, dynamic hint});

  Stream<WsNotification> crateDartApiRustUserWebsocket(
      {required RustUser that,
      required int timeout,
      required int retryInterval,
      dynamic hint});

  Future<RustUser> crateDartApiUserBuilderCreateUser(
      {required UserBuilder that,
      required String userName,
      required String password,
      required String address,
      required String path,
      dynamic hint});

  Stream<UiNotificationType> crateDartApiUserBuilderGetStream(
      {required UserBuilder that, dynamic hint});

  Future<RustUser> crateDartApiUserBuilderLoadDefault(
      {required UserBuilder that, required String path, dynamic hint});

  Future<UserBuilder> crateDartApiUserBuilderNew({dynamic hint});

  Future<UiConversation> crateDartApiExposeConversation(
      {required UiConversation conversation, dynamic hint});

  Future<UiNotificationType> crateDartApiExposeNotificationType(
      {required UiNotificationType notificationType, dynamic hint});

  Stream<LogEntry> crateDartApiCreateLogStream({dynamic hint});

  Future<void> crateDartApiDeleteDatabases(
      {required String clientDbPath, dynamic hint});

  String crateDartApiGreet({required String name, dynamic hint});

  Future<void> crateDartApiRustSetUp({dynamic hint});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RustUser;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RustUser;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_RustUserPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UserBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UserBuilder;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_UserBuilderPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateDartApiRustUserAddUsersToConversation(
      {required RustUser that,
      required ConversationIdBytes conversationId,
      required List<String> userNames,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
            that, serializer);
        sse_encode_box_autoadd_conversation_id_bytes(
            conversationId, serializer);
        sse_encode_list_String(userNames, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateDartApiRustUserAddUsersToConversationConstMeta,
      argValues: [that, conversationId, userNames],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateDartApiRustUserAddUsersToConversationConstMeta =>
      const TaskConstMeta(
        debugName: "RustUser_add_users_to_conversation",
        argNames: ["that", "conversationId", "userNames"],
      );

  @override
  Future<UiContact?> crateDartApiRustUserContact(
      {required RustUser that, required String userName, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
            that, serializer);
        sse_encode_String(userName, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_ui_contact,
        decodeErrorData: null,
      ),
      constMeta: kCrateDartApiRustUserContactConstMeta,
      argValues: [that, userName],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateDartApiRustUserContactConstMeta =>
      const TaskConstMeta(
        debugName: "RustUser_contact",
        argNames: ["that", "userName"],
      );

  @override
  Future<void> crateDartApiRustUserCreateConnection(
      {required RustUser that, required String userName, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
            that, serializer);
        sse_encode_String(userName, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateDartApiRustUserCreateConnectionConstMeta,
      argValues: [that, userName],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateDartApiRustUserCreateConnectionConstMeta =>
      const TaskConstMeta(
        debugName: "RustUser_create_connection",
        argNames: ["that", "userName"],
      );

  @override
  Future<ConversationIdBytes> crateDartApiRustUserCreateConversation(
      {required RustUser that, required String name, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
            that, serializer);
        sse_encode_String(name, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_conversation_id_bytes,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateDartApiRustUserCreateConversationConstMeta,
      argValues: [that, name],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateDartApiRustUserCreateConversationConstMeta =>
      const TaskConstMeta(
        debugName: "RustUser_create_conversation",
        argNames: ["that", "name"],
      );

  @override
  Future<void> crateDartApiRustUserFetchMessages(
      {required RustUser that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateDartApiRustUserFetchMessagesConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateDartApiRustUserFetchMessagesConstMeta =>
      const TaskConstMeta(
        debugName: "RustUser_fetch_messages",
        argNames: ["that"],
      );

  @override
  Future<void> crateDartApiRustUserFlushDebouncerState(
      {required RustUser that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateDartApiRustUserFlushDebouncerStateConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateDartApiRustUserFlushDebouncerStateConstMeta =>
      const TaskConstMeta(
        debugName: "RustUser_flush_debouncer_state",
        argNames: ["that"],
      );

  @override
  Future<List<UiContact>> crateDartApiRustUserGetContacts(
      {required RustUser that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_ui_contact,
        decodeErrorData: null,
      ),
      constMeta: kCrateDartApiRustUserGetContactsConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateDartApiRustUserGetContactsConstMeta =>
      const TaskConstMeta(
        debugName: "RustUser_get_contacts",
        argNames: ["that"],
      );

  @override
  Future<List<UiConversation>> crateDartApiRustUserGetConversations(
      {required RustUser that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_ui_conversation,
        decodeErrorData: null,
      ),
      constMeta: kCrateDartApiRustUserGetConversationsConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateDartApiRustUserGetConversationsConstMeta =>
      const TaskConstMeta(
        debugName: "RustUser_get_conversations",
        argNames: ["that"],
      );

  @override
  Future<List<UiConversationMessage>> crateDartApiRustUserGetMessages(
      {required RustUser that,
      required ConversationIdBytes conversationId,
      required int lastN,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
            that, serializer);
        sse_encode_box_autoadd_conversation_id_bytes(
            conversationId, serializer);
        sse_encode_u_32(lastN, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_ui_conversation_message,
        decodeErrorData: null,
      ),
      constMeta: kCrateDartApiRustUserGetMessagesConstMeta,
      argValues: [that, conversationId, lastN],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateDartApiRustUserGetMessagesConstMeta =>
      const TaskConstMeta(
        debugName: "RustUser_get_messages",
        argNames: ["that", "conversationId", "lastN"],
      );

  @override
  Future<void> crateDartApiRustUserMarkMessagesAsReadDebounced(
      {required RustUser that,
      required ConversationIdBytes conversationId,
      required BigInt timestamp,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
            that, serializer);
        sse_encode_box_autoadd_conversation_id_bytes(
            conversationId, serializer);
        sse_encode_u_64(timestamp, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateDartApiRustUserMarkMessagesAsReadDebouncedConstMeta,
      argValues: [that, conversationId, timestamp],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateDartApiRustUserMarkMessagesAsReadDebouncedConstMeta =>
      const TaskConstMeta(
        debugName: "RustUser_mark_messages_as_read_debounced",
        argNames: ["that", "conversationId", "timestamp"],
      );

  @override
  Future<List<UiContact>> crateDartApiRustUserMemberCandidates(
      {required RustUser that,
      required ConversationIdBytes conversationId,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
            that, serializer);
        sse_encode_box_autoadd_conversation_id_bytes(
            conversationId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_ui_contact,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateDartApiRustUserMemberCandidatesConstMeta,
      argValues: [that, conversationId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateDartApiRustUserMemberCandidatesConstMeta =>
      const TaskConstMeta(
        debugName: "RustUser_member_candidates",
        argNames: ["that", "conversationId"],
      );

  @override
  Future<List<String>> crateDartApiRustUserMembersOfConversation(
      {required RustUser that,
      required ConversationIdBytes conversationId,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
            that, serializer);
        sse_encode_box_autoadd_conversation_id_bytes(
            conversationId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateDartApiRustUserMembersOfConversationConstMeta,
      argValues: [that, conversationId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateDartApiRustUserMembersOfConversationConstMeta =>
      const TaskConstMeta(
        debugName: "RustUser_members_of_conversation",
        argNames: ["that", "conversationId"],
      );

  @override
  Future<UiUserProfile> crateDartApiRustUserOwnUserProfile(
      {required RustUser that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ui_user_profile,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateDartApiRustUserOwnUserProfileConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateDartApiRustUserOwnUserProfileConstMeta =>
      const TaskConstMeta(
        debugName: "RustUser_own_user_profile",
        argNames: ["that"],
      );

  @override
  Future<void> crateDartApiRustUserRemoveUsersFromConversation(
      {required RustUser that,
      required ConversationIdBytes conversationId,
      required List<String> userNames,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
            that, serializer);
        sse_encode_box_autoadd_conversation_id_bytes(
            conversationId, serializer);
        sse_encode_list_String(userNames, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateDartApiRustUserRemoveUsersFromConversationConstMeta,
      argValues: [that, conversationId, userNames],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateDartApiRustUserRemoveUsersFromConversationConstMeta =>
      const TaskConstMeta(
        debugName: "RustUser_remove_users_from_conversation",
        argNames: ["that", "conversationId", "userNames"],
      );

  @override
  Future<UiConversationMessage> crateDartApiRustUserSendMessage(
      {required RustUser that,
      required ConversationIdBytes conversationId,
      required String message,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
            that, serializer);
        sse_encode_box_autoadd_conversation_id_bytes(
            conversationId, serializer);
        sse_encode_String(message, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ui_conversation_message,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateDartApiRustUserSendMessageConstMeta,
      argValues: [that, conversationId, message],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateDartApiRustUserSendMessageConstMeta =>
      const TaskConstMeta(
        debugName: "RustUser_send_message",
        argNames: ["that", "conversationId", "message"],
      );

  @override
  Future<void> crateDartApiRustUserSetConversationPicture(
      {required RustUser that,
      required ConversationIdBytes conversationId,
      Uint8List? conversationPicture,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
            that, serializer);
        sse_encode_box_autoadd_conversation_id_bytes(
            conversationId, serializer);
        sse_encode_opt_list_prim_u_8_strict(conversationPicture, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateDartApiRustUserSetConversationPictureConstMeta,
      argValues: [that, conversationId, conversationPicture],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateDartApiRustUserSetConversationPictureConstMeta =>
      const TaskConstMeta(
        debugName: "RustUser_set_conversation_picture",
        argNames: ["that", "conversationId", "conversationPicture"],
      );

  @override
  Future<void> crateDartApiRustUserSetUserProfile(
      {required RustUser that,
      required String displayName,
      Uint8List? profilePictureOption,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
            that, serializer);
        sse_encode_String(displayName, serializer);
        sse_encode_opt_list_prim_u_8_strict(profilePictureOption, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateDartApiRustUserSetUserProfileConstMeta,
      argValues: [that, displayName, profilePictureOption],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateDartApiRustUserSetUserProfileConstMeta =>
      const TaskConstMeta(
        debugName: "RustUser_set_user_profile",
        argNames: ["that", "displayName", "profilePictureOption"],
      );

  @override
  Future<String> crateDartApiRustUserUserName(
      {required RustUser that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateDartApiRustUserUserNameConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateDartApiRustUserUserNameConstMeta =>
      const TaskConstMeta(
        debugName: "RustUser_user_name",
        argNames: ["that"],
      );

  @override
  Future<UiUserProfile?> crateDartApiRustUserUserProfile(
      {required RustUser that, required String userName, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
            that, serializer);
        sse_encode_String(userName, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_ui_user_profile,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateDartApiRustUserUserProfileConstMeta,
      argValues: [that, userName],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateDartApiRustUserUserProfileConstMeta =>
      const TaskConstMeta(
        debugName: "RustUser_user_profile",
        argNames: ["that", "userName"],
      );

  @override
  Stream<WsNotification> crateDartApiRustUserWebsocket(
      {required RustUser that,
      required int timeout,
      required int retryInterval,
      dynamic hint}) {
    final streamSink = RustStreamSink<WsNotification>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
            that, serializer);
        sse_encode_u_32(timeout, serializer);
        sse_encode_u_32(retryInterval, serializer);
        sse_encode_StreamSink_ws_notification_Sse(streamSink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateDartApiRustUserWebsocketConstMeta,
      argValues: [that, timeout, retryInterval, streamSink],
      apiImpl: this,
      hint: hint,
    )));
    return streamSink.stream;
  }

  TaskConstMeta get kCrateDartApiRustUserWebsocketConstMeta =>
      const TaskConstMeta(
        debugName: "RustUser_websocket",
        argNames: ["that", "timeout", "retryInterval", "streamSink"],
      );

  @override
  Future<RustUser> crateDartApiUserBuilderCreateUser(
      {required UserBuilder that,
      required String userName,
      required String password,
      required String address,
      required String path,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserBuilder(
            that, serializer);
        sse_encode_String(userName, serializer);
        sse_encode_String(password, serializer);
        sse_encode_String(address, serializer);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateDartApiUserBuilderCreateUserConstMeta,
      argValues: [that, userName, password, address, path],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateDartApiUserBuilderCreateUserConstMeta =>
      const TaskConstMeta(
        debugName: "UserBuilder_create_user",
        argNames: ["that", "userName", "password", "address", "path"],
      );

  @override
  Stream<UiNotificationType> crateDartApiUserBuilderGetStream(
      {required UserBuilder that, dynamic hint}) {
    final streamSink = RustStreamSink<UiNotificationType>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserBuilder(
            that, serializer);
        sse_encode_StreamSink_ui_notification_type_Sse(streamSink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateDartApiUserBuilderGetStreamConstMeta,
      argValues: [that, streamSink],
      apiImpl: this,
      hint: hint,
    )));
    return streamSink.stream;
  }

  TaskConstMeta get kCrateDartApiUserBuilderGetStreamConstMeta =>
      const TaskConstMeta(
        debugName: "UserBuilder_get_stream",
        argNames: ["that", "streamSink"],
      );

  @override
  Future<RustUser> crateDartApiUserBuilderLoadDefault(
      {required UserBuilder that, required String path, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserBuilder(
            that, serializer);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateDartApiUserBuilderLoadDefaultConstMeta,
      argValues: [that, path],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateDartApiUserBuilderLoadDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "UserBuilder_load_default",
        argNames: ["that", "path"],
      );

  @override
  Future<UserBuilder> crateDartApiUserBuilderNew({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateDartApiUserBuilderNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateDartApiUserBuilderNewConstMeta => const TaskConstMeta(
        debugName: "UserBuilder_new",
        argNames: [],
      );

  @override
  Future<UiConversation> crateDartApiExposeConversation(
      {required UiConversation conversation, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_ui_conversation(conversation, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ui_conversation,
        decodeErrorData: null,
      ),
      constMeta: kCrateDartApiExposeConversationConstMeta,
      argValues: [conversation],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateDartApiExposeConversationConstMeta =>
      const TaskConstMeta(
        debugName: "_expose_conversation",
        argNames: ["conversation"],
      );

  @override
  Future<UiNotificationType> crateDartApiExposeNotificationType(
      {required UiNotificationType notificationType, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_ui_notification_type(
            notificationType, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ui_notification_type,
        decodeErrorData: null,
      ),
      constMeta: kCrateDartApiExposeNotificationTypeConstMeta,
      argValues: [notificationType],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateDartApiExposeNotificationTypeConstMeta =>
      const TaskConstMeta(
        debugName: "_expose_notification_type",
        argNames: ["notificationType"],
      );

  @override
  Stream<LogEntry> crateDartApiCreateLogStream({dynamic hint}) {
    final s = RustStreamSink<LogEntry>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_log_entry_Sse(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateDartApiCreateLogStreamConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    )));
    return s.stream;
  }

  TaskConstMeta get kCrateDartApiCreateLogStreamConstMeta =>
      const TaskConstMeta(
        debugName: "create_log_stream",
        argNames: ["s"],
      );

  @override
  Future<void> crateDartApiDeleteDatabases(
      {required String clientDbPath, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(clientDbPath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateDartApiDeleteDatabasesConstMeta,
      argValues: [clientDbPath],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateDartApiDeleteDatabasesConstMeta =>
      const TaskConstMeta(
        debugName: "delete_databases",
        argNames: ["clientDbPath"],
      );

  @override
  String crateDartApiGreet({required String name, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateDartApiGreetConstMeta,
      argValues: [name],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateDartApiGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  Future<void> crateDartApiRustSetUp({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateDartApiRustSetUpConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateDartApiRustSetUpConstMeta => const TaskConstMeta(
        debugName: "rust_set_up",
        argNames: [],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RustUser => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RustUser => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UserBuilder => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UserBuilder => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserBuilder;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  RustUser
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RustUser.dcoDecode(raw as List<dynamic>);
  }

  @protected
  UserBuilder
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UserBuilder.dcoDecode(raw as List<dynamic>);
  }

  @protected
  RustUser
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RustUser.dcoDecode(raw as List<dynamic>);
  }

  @protected
  UserBuilder
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UserBuilder.dcoDecode(raw as List<dynamic>);
  }

  @protected
  DateTime dco_decode_Chrono_Utc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeTimestamp(ts: dco_decode_i_64(raw).toInt(), isUtc: true);
  }

  @protected
  RustUser
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RustUser.dcoDecode(raw as List<dynamic>);
  }

  @protected
  UserBuilder
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UserBuilder.dcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<LogEntry> dco_decode_StreamSink_log_entry_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<UiNotificationType>
      dco_decode_StreamSink_ui_notification_type_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<WsNotification> dco_decode_StreamSink_ws_notification_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  ConversationIdBytes dco_decode_box_autoadd_conversation_id_bytes(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_conversation_id_bytes(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  UiContact dco_decode_box_autoadd_ui_contact(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ui_contact(raw);
  }

  @protected
  UiContentMessage dco_decode_box_autoadd_ui_content_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ui_content_message(raw);
  }

  @protected
  UiConversation dco_decode_box_autoadd_ui_conversation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ui_conversation(raw);
  }

  @protected
  UiConversationMessage dco_decode_box_autoadd_ui_conversation_message(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ui_conversation_message(raw);
  }

  @protected
  UiErrorMessage dco_decode_box_autoadd_ui_error_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ui_error_message(raw);
  }

  @protected
  UiEventMessage dco_decode_box_autoadd_ui_event_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ui_event_message(raw);
  }

  @protected
  UiInactiveConversation dco_decode_box_autoadd_ui_inactive_conversation(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ui_inactive_conversation(raw);
  }

  @protected
  UiMessageId dco_decode_box_autoadd_ui_message_id(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ui_message_id(raw);
  }

  @protected
  UiMimiContent dco_decode_box_autoadd_ui_mimi_content(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ui_mimi_content(raw);
  }

  @protected
  UiNotificationType dco_decode_box_autoadd_ui_notification_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ui_notification_type(raw);
  }

  @protected
  UiReplyToInfo dco_decode_box_autoadd_ui_reply_to_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ui_reply_to_info(raw);
  }

  @protected
  UiSystemMessage dco_decode_box_autoadd_ui_system_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ui_system_message(raw);
  }

  @protected
  UiUserProfile dco_decode_box_autoadd_ui_user_profile(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ui_user_profile(raw);
  }

  @protected
  ConversationIdBytes dco_decode_conversation_id_bytes(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ConversationIdBytes(
      bytes: dco_decode_u_8_array_16(arr[0]),
    );
  }

  @protected
  GroupIdBytes dco_decode_group_id_bytes(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return GroupIdBytes(
      bytes: dco_decode_list_prim_u_8_strict(arr[0]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<UiContact> dco_decode_list_ui_contact(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_ui_contact).toList();
  }

  @protected
  List<UiConversation> dco_decode_list_ui_conversation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_ui_conversation).toList();
  }

  @protected
  List<UiConversationMessage> dco_decode_list_ui_conversation_message(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_ui_conversation_message)
        .toList();
  }

  @protected
  List<UiMessageId> dco_decode_list_ui_message_id(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_ui_message_id).toList();
  }

  @protected
  LogEntry dco_decode_log_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return LogEntry(
      timeMillis: dco_decode_i_64(arr[0]),
      level: dco_decode_i_32(arr[1]),
      tag: dco_decode_String(arr[2]),
      msg: dco_decode_String(arr[3]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  UiContact? dco_decode_opt_box_autoadd_ui_contact(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_ui_contact(raw);
  }

  @protected
  UiMessageId? dco_decode_opt_box_autoadd_ui_message_id(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_ui_message_id(raw);
  }

  @protected
  UiReplyToInfo? dco_decode_opt_box_autoadd_ui_reply_to_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_ui_reply_to_info(raw);
  }

  @protected
  UiUserProfile? dco_decode_opt_box_autoadd_ui_user_profile(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_ui_user_profile(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  U8Array16 dco_decode_u_8_array_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U8Array16(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  UiContact dco_decode_ui_contact(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UiContact(
      userName: dco_decode_String(arr[0]),
    );
  }

  @protected
  UiContentMessage dco_decode_ui_content_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return UiContentMessage(
      sender: dco_decode_String(arr[0]),
      sent: dco_decode_bool(arr[1]),
      content: dco_decode_ui_mimi_content(arr[2]),
    );
  }

  @protected
  UiConversation dco_decode_ui_conversation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return UiConversation(
      id: dco_decode_conversation_id_bytes(arr[0]),
      groupId: dco_decode_group_id_bytes(arr[1]),
      status: dco_decode_ui_conversation_status(arr[2]),
      conversationType: dco_decode_ui_conversation_type(arr[3]),
      lastUsed: dco_decode_u_64(arr[4]),
      attributes: dco_decode_ui_conversation_attributes(arr[5]),
    );
  }

  @protected
  UiConversationAttributes dco_decode_ui_conversation_attributes(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return UiConversationAttributes(
      title: dco_decode_String(arr[0]),
      conversationPictureOption: dco_decode_opt_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  UiConversationMessage dco_decode_ui_conversation_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return UiConversationMessage(
      conversationId: dco_decode_conversation_id_bytes(arr[0]),
      id: dco_decode_uuid_bytes(arr[1]),
      timestamp: dco_decode_Chrono_Utc(arr[2]),
      message: dco_decode_ui_message(arr[3]),
    );
  }

  @protected
  UiConversationStatus dco_decode_ui_conversation_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return UiConversationStatus_Inactive(
          dco_decode_box_autoadd_ui_inactive_conversation(raw[1]),
        );
      case 1:
        return UiConversationStatus_Active();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  UiConversationType dco_decode_ui_conversation_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return UiConversationType_UnconfirmedConnection(
          dco_decode_String(raw[1]),
        );
      case 1:
        return UiConversationType_Connection(
          dco_decode_String(raw[1]),
        );
      case 2:
        return UiConversationType_Group();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  UiErrorMessage dco_decode_ui_error_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UiErrorMessage(
      message: dco_decode_String(arr[0]),
    );
  }

  @protected
  UiEventMessage dco_decode_ui_event_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return UiEventMessage_System(
          dco_decode_box_autoadd_ui_system_message(raw[1]),
        );
      case 1:
        return UiEventMessage_Error(
          dco_decode_box_autoadd_ui_error_message(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  UiInactiveConversation dco_decode_ui_inactive_conversation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UiInactiveConversation(
      pastMembers: dco_decode_list_String(arr[0]),
    );
  }

  @protected
  UiMessage dco_decode_ui_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return UiMessage_Content(
          dco_decode_box_autoadd_ui_content_message(raw[1]),
        );
      case 1:
        return UiMessage_Display(
          dco_decode_box_autoadd_ui_event_message(raw[1]),
        );
      case 2:
        return UiMessage_Unsent(
          dco_decode_box_autoadd_ui_mimi_content(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  UiMessageId dco_decode_ui_message_id(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return UiMessageId(
      id: dco_decode_uuid_bytes(arr[0]),
      domain: dco_decode_String(arr[1]),
    );
  }

  @protected
  UiMimiContent dco_decode_ui_mimi_content(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return UiMimiContent(
      id: dco_decode_ui_message_id(arr[0]),
      timestamp: dco_decode_u_64(arr[1]),
      replaces: dco_decode_opt_box_autoadd_ui_message_id(arr[2]),
      topicId: dco_decode_opt_list_prim_u_8_strict(arr[3]),
      expires: dco_decode_opt_box_autoadd_u_64(arr[4]),
      inReplyTo: dco_decode_opt_box_autoadd_ui_reply_to_info(arr[5]),
      lastSeen: dco_decode_list_ui_message_id(arr[6]),
      body: dco_decode_String(arr[7]),
    );
  }

  @protected
  UiNotificationType dco_decode_ui_notification_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return UiNotificationType_ConversationChange(
          dco_decode_box_autoadd_conversation_id_bytes(raw[1]),
        );
      case 1:
        return UiNotificationType_Message(
          dco_decode_box_autoadd_ui_conversation_message(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  UiReplyToInfo dco_decode_ui_reply_to_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return UiReplyToInfo(
      messageId: dco_decode_ui_message_id(arr[0]),
      hash: dco_decode_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  UiSystemMessage dco_decode_ui_system_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UiSystemMessage(
      message: dco_decode_String(arr[0]),
    );
  }

  @protected
  UiUserProfile dco_decode_ui_user_profile(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return UiUserProfile(
      userName: dco_decode_String(arr[0]),
      displayName: dco_decode_opt_String(arr[1]),
      profilePictureOption: dco_decode_opt_list_prim_u_8_strict(arr[2]),
    );
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  UuidBytes dco_decode_uuid_bytes(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UuidBytes(
      bytes: dco_decode_u_8_array_16(arr[0]),
    );
  }

  @protected
  WsNotification dco_decode_ws_notification(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WsNotification.values[raw as int];
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  RustUser
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RustUser.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UserBuilder
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UserBuilder.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustUser
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RustUser.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UserBuilder
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UserBuilder.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DateTime sse_decode_Chrono_Utc(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return DateTime.fromMicrosecondsSinceEpoch(inner.toInt(), isUtc: true);
  }

  @protected
  RustUser
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RustUser.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UserBuilder
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UserBuilder.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<LogEntry> sse_decode_StreamSink_log_entry_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<UiNotificationType>
      sse_decode_StreamSink_ui_notification_type_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<WsNotification> sse_decode_StreamSink_ws_notification_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  ConversationIdBytes sse_decode_box_autoadd_conversation_id_bytes(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_conversation_id_bytes(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  UiContact sse_decode_box_autoadd_ui_contact(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ui_contact(deserializer));
  }

  @protected
  UiContentMessage sse_decode_box_autoadd_ui_content_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ui_content_message(deserializer));
  }

  @protected
  UiConversation sse_decode_box_autoadd_ui_conversation(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ui_conversation(deserializer));
  }

  @protected
  UiConversationMessage sse_decode_box_autoadd_ui_conversation_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ui_conversation_message(deserializer));
  }

  @protected
  UiErrorMessage sse_decode_box_autoadd_ui_error_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ui_error_message(deserializer));
  }

  @protected
  UiEventMessage sse_decode_box_autoadd_ui_event_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ui_event_message(deserializer));
  }

  @protected
  UiInactiveConversation sse_decode_box_autoadd_ui_inactive_conversation(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ui_inactive_conversation(deserializer));
  }

  @protected
  UiMessageId sse_decode_box_autoadd_ui_message_id(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ui_message_id(deserializer));
  }

  @protected
  UiMimiContent sse_decode_box_autoadd_ui_mimi_content(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ui_mimi_content(deserializer));
  }

  @protected
  UiNotificationType sse_decode_box_autoadd_ui_notification_type(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ui_notification_type(deserializer));
  }

  @protected
  UiReplyToInfo sse_decode_box_autoadd_ui_reply_to_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ui_reply_to_info(deserializer));
  }

  @protected
  UiSystemMessage sse_decode_box_autoadd_ui_system_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ui_system_message(deserializer));
  }

  @protected
  UiUserProfile sse_decode_box_autoadd_ui_user_profile(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ui_user_profile(deserializer));
  }

  @protected
  ConversationIdBytes sse_decode_conversation_id_bytes(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_bytes = sse_decode_u_8_array_16(deserializer);
    return ConversationIdBytes(bytes: var_bytes);
  }

  @protected
  GroupIdBytes sse_decode_group_id_bytes(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_bytes = sse_decode_list_prim_u_8_strict(deserializer);
    return GroupIdBytes(bytes: var_bytes);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<UiContact> sse_decode_list_ui_contact(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UiContact>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ui_contact(deserializer));
    }
    return ans_;
  }

  @protected
  List<UiConversation> sse_decode_list_ui_conversation(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UiConversation>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ui_conversation(deserializer));
    }
    return ans_;
  }

  @protected
  List<UiConversationMessage> sse_decode_list_ui_conversation_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UiConversationMessage>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ui_conversation_message(deserializer));
    }
    return ans_;
  }

  @protected
  List<UiMessageId> sse_decode_list_ui_message_id(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UiMessageId>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ui_message_id(deserializer));
    }
    return ans_;
  }

  @protected
  LogEntry sse_decode_log_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_timeMillis = sse_decode_i_64(deserializer);
    var var_level = sse_decode_i_32(deserializer);
    var var_tag = sse_decode_String(deserializer);
    var var_msg = sse_decode_String(deserializer);
    return LogEntry(
        timeMillis: var_timeMillis,
        level: var_level,
        tag: var_tag,
        msg: var_msg);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  UiContact? sse_decode_opt_box_autoadd_ui_contact(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_ui_contact(deserializer));
    } else {
      return null;
    }
  }

  @protected
  UiMessageId? sse_decode_opt_box_autoadd_ui_message_id(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_ui_message_id(deserializer));
    } else {
      return null;
    }
  }

  @protected
  UiReplyToInfo? sse_decode_opt_box_autoadd_ui_reply_to_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_ui_reply_to_info(deserializer));
    } else {
      return null;
    }
  }

  @protected
  UiUserProfile? sse_decode_opt_box_autoadd_ui_user_profile(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_ui_user_profile(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  U8Array16 sse_decode_u_8_array_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array16(inner);
  }

  @protected
  UiContact sse_decode_ui_contact(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_userName = sse_decode_String(deserializer);
    return UiContact(userName: var_userName);
  }

  @protected
  UiContentMessage sse_decode_ui_content_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_sender = sse_decode_String(deserializer);
    var var_sent = sse_decode_bool(deserializer);
    var var_content = sse_decode_ui_mimi_content(deserializer);
    return UiContentMessage(
        sender: var_sender, sent: var_sent, content: var_content);
  }

  @protected
  UiConversation sse_decode_ui_conversation(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_conversation_id_bytes(deserializer);
    var var_groupId = sse_decode_group_id_bytes(deserializer);
    var var_status = sse_decode_ui_conversation_status(deserializer);
    var var_conversationType = sse_decode_ui_conversation_type(deserializer);
    var var_lastUsed = sse_decode_u_64(deserializer);
    var var_attributes = sse_decode_ui_conversation_attributes(deserializer);
    return UiConversation(
        id: var_id,
        groupId: var_groupId,
        status: var_status,
        conversationType: var_conversationType,
        lastUsed: var_lastUsed,
        attributes: var_attributes);
  }

  @protected
  UiConversationAttributes sse_decode_ui_conversation_attributes(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_title = sse_decode_String(deserializer);
    var var_conversationPictureOption =
        sse_decode_opt_list_prim_u_8_strict(deserializer);
    return UiConversationAttributes(
        title: var_title,
        conversationPictureOption: var_conversationPictureOption);
  }

  @protected
  UiConversationMessage sse_decode_ui_conversation_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_conversationId = sse_decode_conversation_id_bytes(deserializer);
    var var_id = sse_decode_uuid_bytes(deserializer);
    var var_timestamp = sse_decode_Chrono_Utc(deserializer);
    var var_message = sse_decode_ui_message(deserializer);
    return UiConversationMessage(
        conversationId: var_conversationId,
        id: var_id,
        timestamp: var_timestamp,
        message: var_message);
  }

  @protected
  UiConversationStatus sse_decode_ui_conversation_status(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_box_autoadd_ui_inactive_conversation(deserializer);
        return UiConversationStatus_Inactive(var_field0);
      case 1:
        return UiConversationStatus_Active();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  UiConversationType sse_decode_ui_conversation_type(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return UiConversationType_UnconfirmedConnection(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return UiConversationType_Connection(var_field0);
      case 2:
        return UiConversationType_Group();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  UiErrorMessage sse_decode_ui_error_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_message = sse_decode_String(deserializer);
    return UiErrorMessage(message: var_message);
  }

  @protected
  UiEventMessage sse_decode_ui_event_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_ui_system_message(deserializer);
        return UiEventMessage_System(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_ui_error_message(deserializer);
        return UiEventMessage_Error(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  UiInactiveConversation sse_decode_ui_inactive_conversation(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_pastMembers = sse_decode_list_String(deserializer);
    return UiInactiveConversation(pastMembers: var_pastMembers);
  }

  @protected
  UiMessage sse_decode_ui_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_box_autoadd_ui_content_message(deserializer);
        return UiMessage_Content(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_ui_event_message(deserializer);
        return UiMessage_Display(var_field0);
      case 2:
        var var_field0 = sse_decode_box_autoadd_ui_mimi_content(deserializer);
        return UiMessage_Unsent(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  UiMessageId sse_decode_ui_message_id(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_uuid_bytes(deserializer);
    var var_domain = sse_decode_String(deserializer);
    return UiMessageId(id: var_id, domain: var_domain);
  }

  @protected
  UiMimiContent sse_decode_ui_mimi_content(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_ui_message_id(deserializer);
    var var_timestamp = sse_decode_u_64(deserializer);
    var var_replaces = sse_decode_opt_box_autoadd_ui_message_id(deserializer);
    var var_topicId = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_expires = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_inReplyTo =
        sse_decode_opt_box_autoadd_ui_reply_to_info(deserializer);
    var var_lastSeen = sse_decode_list_ui_message_id(deserializer);
    var var_body = sse_decode_String(deserializer);
    return UiMimiContent(
        id: var_id,
        timestamp: var_timestamp,
        replaces: var_replaces,
        topicId: var_topicId,
        expires: var_expires,
        inReplyTo: var_inReplyTo,
        lastSeen: var_lastSeen,
        body: var_body);
  }

  @protected
  UiNotificationType sse_decode_ui_notification_type(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_box_autoadd_conversation_id_bytes(deserializer);
        return UiNotificationType_ConversationChange(var_field0);
      case 1:
        var var_field0 =
            sse_decode_box_autoadd_ui_conversation_message(deserializer);
        return UiNotificationType_Message(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  UiReplyToInfo sse_decode_ui_reply_to_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_messageId = sse_decode_ui_message_id(deserializer);
    var var_hash = sse_decode_list_prim_u_8_strict(deserializer);
    return UiReplyToInfo(messageId: var_messageId, hash: var_hash);
  }

  @protected
  UiSystemMessage sse_decode_ui_system_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_message = sse_decode_String(deserializer);
    return UiSystemMessage(message: var_message);
  }

  @protected
  UiUserProfile sse_decode_ui_user_profile(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_userName = sse_decode_String(deserializer);
    var var_displayName = sse_decode_opt_String(deserializer);
    var var_profilePictureOption =
        sse_decode_opt_list_prim_u_8_strict(deserializer);
    return UiUserProfile(
        userName: var_userName,
        displayName: var_displayName,
        profilePictureOption: var_profilePictureOption);
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  UuidBytes sse_decode_uuid_bytes(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_bytes = sse_decode_u_8_array_16(deserializer);
    return UuidBytes(bytes: var_bytes);
  }

  @protected
  WsNotification sse_decode_ws_notification(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return WsNotification.values[inner];
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
          RustUser self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserBuilder(
          UserBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
          RustUser self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserBuilder(
          UserBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_Chrono_Utc(DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(
        PlatformInt64Util.from(self.microsecondsSinceEpoch), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustUser(
          RustUser self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserBuilder(
          UserBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_StreamSink_log_entry_Sse(
      RustStreamSink<LogEntry> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_log_entry,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_ui_notification_type_Sse(
      RustStreamSink<UiNotificationType> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_ui_notification_type,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_ws_notification_Sse(
      RustStreamSink<WsNotification> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_ws_notification,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_conversation_id_bytes(
      ConversationIdBytes self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_conversation_id_bytes(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ui_contact(
      UiContact self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_contact(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ui_content_message(
      UiContentMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_content_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ui_conversation(
      UiConversation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_conversation(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ui_conversation_message(
      UiConversationMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_conversation_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ui_error_message(
      UiErrorMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_error_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ui_event_message(
      UiEventMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_event_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ui_inactive_conversation(
      UiInactiveConversation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_inactive_conversation(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ui_message_id(
      UiMessageId self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_message_id(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ui_mimi_content(
      UiMimiContent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_mimi_content(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ui_notification_type(
      UiNotificationType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_notification_type(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ui_reply_to_info(
      UiReplyToInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_reply_to_info(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ui_system_message(
      UiSystemMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_system_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ui_user_profile(
      UiUserProfile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_user_profile(self, serializer);
  }

  @protected
  void sse_encode_conversation_id_bytes(
      ConversationIdBytes self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8_array_16(self.bytes, serializer);
  }

  @protected
  void sse_encode_group_id_bytes(GroupIdBytes self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.bytes, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_ui_contact(
      List<UiContact> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ui_contact(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ui_conversation(
      List<UiConversation> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ui_conversation(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ui_conversation_message(
      List<UiConversationMessage> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ui_conversation_message(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ui_message_id(
      List<UiMessageId> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ui_message_id(item, serializer);
    }
  }

  @protected
  void sse_encode_log_entry(LogEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.timeMillis, serializer);
    sse_encode_i_32(self.level, serializer);
    sse_encode_String(self.tag, serializer);
    sse_encode_String(self.msg, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_ui_contact(
      UiContact? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_ui_contact(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_ui_message_id(
      UiMessageId? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_ui_message_id(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_ui_reply_to_info(
      UiReplyToInfo? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_ui_reply_to_info(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_ui_user_profile(
      UiUserProfile? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_ui_user_profile(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_u_8_array_16(U8Array16 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_ui_contact(UiContact self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.userName, serializer);
  }

  @protected
  void sse_encode_ui_content_message(
      UiContentMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.sender, serializer);
    sse_encode_bool(self.sent, serializer);
    sse_encode_ui_mimi_content(self.content, serializer);
  }

  @protected
  void sse_encode_ui_conversation(
      UiConversation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_conversation_id_bytes(self.id, serializer);
    sse_encode_group_id_bytes(self.groupId, serializer);
    sse_encode_ui_conversation_status(self.status, serializer);
    sse_encode_ui_conversation_type(self.conversationType, serializer);
    sse_encode_u_64(self.lastUsed, serializer);
    sse_encode_ui_conversation_attributes(self.attributes, serializer);
  }

  @protected
  void sse_encode_ui_conversation_attributes(
      UiConversationAttributes self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.title, serializer);
    sse_encode_opt_list_prim_u_8_strict(
        self.conversationPictureOption, serializer);
  }

  @protected
  void sse_encode_ui_conversation_message(
      UiConversationMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_conversation_id_bytes(self.conversationId, serializer);
    sse_encode_uuid_bytes(self.id, serializer);
    sse_encode_Chrono_Utc(self.timestamp, serializer);
    sse_encode_ui_message(self.message, serializer);
  }

  @protected
  void sse_encode_ui_conversation_status(
      UiConversationStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case UiConversationStatus_Inactive(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_ui_inactive_conversation(field0, serializer);
      case UiConversationStatus_Active():
        sse_encode_i_32(1, serializer);
    }
  }

  @protected
  void sse_encode_ui_conversation_type(
      UiConversationType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case UiConversationType_UnconfirmedConnection(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case UiConversationType_Connection(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
      case UiConversationType_Group():
        sse_encode_i_32(2, serializer);
    }
  }

  @protected
  void sse_encode_ui_error_message(
      UiErrorMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_ui_event_message(
      UiEventMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case UiEventMessage_System(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_ui_system_message(field0, serializer);
      case UiEventMessage_Error(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_ui_error_message(field0, serializer);
    }
  }

  @protected
  void sse_encode_ui_inactive_conversation(
      UiInactiveConversation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.pastMembers, serializer);
  }

  @protected
  void sse_encode_ui_message(UiMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case UiMessage_Content(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_ui_content_message(field0, serializer);
      case UiMessage_Display(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_ui_event_message(field0, serializer);
      case UiMessage_Unsent(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_ui_mimi_content(field0, serializer);
    }
  }

  @protected
  void sse_encode_ui_message_id(UiMessageId self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_uuid_bytes(self.id, serializer);
    sse_encode_String(self.domain, serializer);
  }

  @protected
  void sse_encode_ui_mimi_content(
      UiMimiContent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_message_id(self.id, serializer);
    sse_encode_u_64(self.timestamp, serializer);
    sse_encode_opt_box_autoadd_ui_message_id(self.replaces, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.topicId, serializer);
    sse_encode_opt_box_autoadd_u_64(self.expires, serializer);
    sse_encode_opt_box_autoadd_ui_reply_to_info(self.inReplyTo, serializer);
    sse_encode_list_ui_message_id(self.lastSeen, serializer);
    sse_encode_String(self.body, serializer);
  }

  @protected
  void sse_encode_ui_notification_type(
      UiNotificationType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case UiNotificationType_ConversationChange(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_conversation_id_bytes(field0, serializer);
      case UiNotificationType_Message(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_ui_conversation_message(field0, serializer);
    }
  }

  @protected
  void sse_encode_ui_reply_to_info(
      UiReplyToInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ui_message_id(self.messageId, serializer);
    sse_encode_list_prim_u_8_strict(self.hash, serializer);
  }

  @protected
  void sse_encode_ui_system_message(
      UiSystemMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_ui_user_profile(
      UiUserProfile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.userName, serializer);
    sse_encode_opt_String(self.displayName, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.profilePictureOption, serializer);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_uuid_bytes(UuidBytes self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8_array_16(self.bytes, serializer);
  }

  @protected
  void sse_encode_ws_notification(
      WsNotification self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }
}
